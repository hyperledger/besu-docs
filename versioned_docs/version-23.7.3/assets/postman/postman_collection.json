{
  "info": {
    "_postman_id": "f334929f-c8c3-43ed-bb73-69a6f0d728d8",
    "name": "Hyperledger Besu JSON-RPC API",
    "description": "Hyperledger Besu JSON-RPC API enables interaction with a Besu Ethereum node.\n\nRefer to [Besu documentation how to page](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API/) to learn how to use this API.\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "ADMIN",
      "item": [
        {
          "name": "admin_addPeer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Result should be true\", () => {",
                  "    //parse the response json",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.id).to.eql(1);",
                  "    pm.expect(responseJson.result).is.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-length": true,
              "host": true
            }
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_addPeer\",\n    \"params\": [\n        \"enode://c93f69ddd83d3db3e93e5165d60b4f5d93a9731df776beee94c5f8a0c770e41bdea69094136402db0cef7af63f0aa636ff676d4a88c6d37276dfa4160c21ed5f@127.0.0.1:30303\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Adds a static node\n\n> **Caution**\n>\n> If connections are timing out, ensure the node ID in the enode URL is correct.\n\n#### Parameters\n\n`string` : Enode URL of peer to add\n\n#### Returns\n\n`result` : `boolean` - `true` if peer added or `false` if peer already a static node."
          },
          "response": [
            {
              "name": "admin_addPeer",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_addPeer\",\n    \"params\": [\n        \"enode://c93f69ddd83d3db3e93e5165d60b4f5d93a9731df776beee94c5f8a0c770e41bdea69094136402db0cef7af63f0aa636ff676d4a88c6d37276dfa4160c21ed5f@127.0.0.1:30303\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "admin_changeLogLevel",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_changeLogLevel\",\n    \"params\": [\n        \"DEBUG\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Changes the log level without restarting Besu. You can change the log level for all logs, or you\ncan change the log level for specific packages or classes.\n\nYou can specify only one log level per RPC call.\n\n#### Parameters\n\n`level` - [Log level](https://besu.hyperledger.org/en/stable/Reference/CLI/CLI-Syntax/#logging)\n\n`log_filter`: `Array` - Packages or classes to change the log level for. Optional.\n\n#### Returns\n\n`result` : `Success` if the log level has changed, otherwise `error`."
          },
          "response": [
            {
              "name": "admin_changeLogLevel",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_changeLogLevel\",\n    \"params\": [\n        \"DEBUG\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "admin_generateLogBloomCache",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_generateLogBloomCache\",\n    \"params\": [\n        \"0x0\",\n        \"0x10000\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Generates cached log bloom indexes for blocks. APIs such as [`eth_getLogs`](#eth_getlogs) and\n[`eth_getFilterLogs`](#eth_getfilterlogs) use the cache for improved performance.\n\n> **note**\n>\n> Each index file contains 100000 blocks. The last fragment of blocks less than 100000 are not indexed.\n\n> **tip**\n>\n> Manually executing `admin_generateLogBloomCache` is not required unless the [`--auto-log-bloom-caching-enabled`](https://besu.hyperledger.org/en/stable/Reference/CLI/CLI-Syntax/#auto-log-bloom-caching-enabled) command line option was set to false.\n\n#### Parameters\n\n`integer` - Block to start generating indexes.\n\n`integer` - Block to stop generating indexes.\n\n#### Returns\n\n`result` : *object* - Log bloom index details:\n\n* `quantity` : `startBlock` - Starting block for the last requested cache generation.\n* `quantity` : `endBlock` - Ending block for the last requested cache generation.\n* `quantity` : `currentBlock` - The most recent block added to the cache.\n* `boolean` : `indexing` - `true` if indexing is in progress.\n* `boolean` : `true` indicates acceptance of the request from this call to generate the cache."
          },
          "response": [
            {
              "name": "admin_generateLogBloomCache",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_generateLogBloomCache\",\n    \"params\": [\n        \"0x0\",\n        \"0x10000\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"startBlock\": \"0x0\",\n        \"endBlock\": \"0x10000\",\n        \"currentBlock\": \"0x0\",\n        \"indexing\": true,\n        \"requestAccepted\": true\n    }\n}"
            }
          ]
        },
        {
          "name": "admin_logsRepairCache",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_logsRepairCache\",\n    \"params\": [\n        \"1200\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Repairs cached logs by fixing all segments starting with the specified block number.\n\n#### Parameters\n\n`quantity` - Decimal index of the starting block to fix. If left empty, the head block\nis used as the starting point.\n\n#### Returns\n\n`result` -  Status of the repair request. Either `Started`, or `Already running`."
          },
          "response": [
            {
              "name": "admin_logsRepairCache",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_logsRepairCache\",\n    \"params\": [\n        \"1200\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"Status\": \"Started\"\n    }\n}"
            }
          ]
        },
        {
          "name": "admin_nodeInfo",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_nodeInfo\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns networking information about the node. The information includes general information about\nthe node and specific information from each running Ethereum sub-protocol (for example, `eth`).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : Node object\n\nProperties of the node object are:\n\n* `enode` - [Enode URL](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url) of the node.\n* `listenAddr` - Host and port for the node.\n* `name` - Client name.\n* `id` - [Node public key](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#node-public-key).\n* `ports` - Peer discovery and listening\n  [ports](https://besu.hyperledger.org/en/stable/HowTo/Find-and-Connect/Managing-Peers#port-configuration).\n* `protocols` - List of objects containing information for each Ethereum sub-protocol.\n\n> **note**\n>\n> If the node is running locally, the host of the `enode` and `listenAddr` display as `[::]` in the result. When advertising externally, the external address displayed for the `enode` and `listenAddr` is defined by [`--nat-method`](https://besu.hyperledger.org/en/stable/HowTo/Find-and-Connect/Specifying-NAT).\n"
          },
          "response": [
            {
              "name": "admin_nodeInfo",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_nodeInfo\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"enode\": \"enode://87ec35d558352cc55cd1bf6a472557797f91287b78fe5e86760219124563450ad1bb807e4cc61e86c574189a851733227155551a14b9d0e1f62c5e11332a18a3@[::]:30303\",\n        \"listenAddr\": \"[::]:30303\",\n        \"name\": \"besu/v1.0.1-dev-0d2294a5/osx-x86_64/oracle-java-1.8\",\n        \"id\": \"87ec35d558352cc55cd1bf6a472557797f91287b78fe5e86760219124563450ad1bb807e4cc61e86c574189a851733227155551a14b9d0e1f62c5e11332a18a3\",\n        \"ports\": {\n            \"discovery\": 30303,\n            \"listener\": 30303\n        },\n        \"protocols\": {\n            \"eth\": {\n                \"config\": {\n                    \"chainId\": 2018,\n                    \"homesteadBlock\": 0,\n                    \"daoForkBlock\": 0,\n                    \"daoForkSupport\": true,\n                    \"eip150Block\": 0,\n                    \"eip155Block\": 0,\n                    \"eip158Block\": 0,\n                    \"byzantiumBlock\": 0,\n                    \"constantinopleBlock\": 0,\n                    \"constantinopleFixBlock\": 0,\n                    \"ethash\": {\n                        \"fixeddifficulty\": 100\n                    }\n                },\n                \"difficulty\": 78536,\n                \"genesis\": \"0x43ee12d45470e57c86a0dfe008a5b847af9e372d05e8ba8f01434526eb2bea0f\",\n                \"head\": \"0xc6677651f16d07ae59cab3a5e1f0b814ed2ec27c00a93297b2aa2e29707844d9\",\n                \"network\": 2018\n            }\n        }\n    }\n}"
            }
          ]
        },
        {
          "name": "admin_peers",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_peers\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns networking information about connected remote nodes.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *array* of *objects* - Object returned for each remote node.\n\nProperties of the remote node object are:\n\n* `version` - P2P protocol version.\n* `name` - Client name.\n* `caps` - List of Ethereum sub-protocol capabilities.\n* `network` - Local and remote addresses established at time of bonding with the peer. The remote\n  address might not match the hex value for `port`. The remote address depends on which node\n  initiated the connection.\n* `port` - Port on the remote node on which P2P discovery is listening.\n* `id` - Node public key. Excluding the `0x` prefix, the node public key is the ID in the enode\n  URL `enode://<id ex 0x>@<host>:<port>`.\n* `protocols` - [Current state of peer](https://besu.hyperledger.org/en/stable/HowTo/Find-and-Connect/Managing-Peers#monitoring-peer-connections)\n  including `difficulty` and `head`. `head` is the hash of the highest known block for the peer."
          },
          "response": [
            {
              "name": "admin_peers",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_peers\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n        \"version\": \"0x5\",\n        \"name\": \"besu/v20.10.4-dev-0905d1b2/osx-x86_64/adoptopenjdk-java-11\",\n        \"caps\": [\n            \"eth/62\",\n            \"eth/63\",\n            \"eth/64\",\n            \"eth/65\",\n            \"IBF/1\"\n        ],\n        \"network\": {\n            \"localAddress\": \"192.168.1.229:50115\",\n            \"remoteAddress\": \"168.61.153.255:40303\"\n        },\n        \"port\": \"0x765f\",\n        \"id\": \"0xe143eadaf670d49afa3327cae2e655b083f5a89dac037c9af065914a9f8e6bceebcfe7ae2258bd22a9cd18b6a6de07b9790e71de49b78afa456e401bd2fb22fc\",\n        \"protocols\": {\n            \"eth\": {\n            \"difficulty\": \"0x1ac\",\n            \"head\": \"0x964090ae9277aef43f47f1b8c28411f162243d523118605f0b1231dbfdf3611a\",\n            \"version\": 65\n            }\n        }\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "admin_removePeer",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_removePeer\",\n    \"params\": [\n        \"enode://f59c0ab603377b6ec88b89d5bb41b98fc385030ab1e4b03752db6f7dab364559d92c757c13116ae6408d2d33f0138e7812eb8b696b2a22fe3332c4b5127b22a3@127.0.0.1:30304\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Removes a [static node](https://besu.hyperledger.org/en/stable/HowTo/Find-and-Connect/Static-Nodes).\n\n#### Parameters\n\n`string` : [Enode URL](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url) of peer to remove.\n\n#### Returns\n\n`result` : `boolean` - `true` if peer removed or `false` if peer not a\n[static node](https://besu.hyperledger.org/en/stable/HowTo/Find-and-Connect/Static-Nodes))."
          },
          "response": [
            {
              "name": "admin_removePeer",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"admin_removePeer\",\n    \"params\": [\n        \"enode://f59c0ab603377b6ec88b89d5bb41b98fc385030ab1e4b03752db6f7dab364559d92c757c13116ae6408d2d33f0138e7812eb8b696b2a22fe3332c4b5127b22a3@127.0.0.1:30304\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `ADMIN` API methods are not enabled by default for JSON-RPC. To enable the `ADMIN` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or\n[`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "CLIQUE",
      "item": [
        {
          "name": "clique_discard",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_discard\",\n    \"params\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Discards a proposal to [add or remove a signer with the specified address].\n\n#### Parameters\n\n`data` - 20-byte address of proposed signer.\n\n#### Returns\n\n`result: boolean` - `true`"
          },
          "response": [
            {
              "name": "clique_discard",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_discard\",\n    \"params\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "clique_getSignerMetrics",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSignerMetrics\",\n    \"params\": [\n        \"1\",\n        \"100\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Provides validator metrics for the specified range:\n\n* Number of blocks from each validator.\n* Block number of the last block proposed by each validator (if any proposed in the specified\n  range).\n* All validators present in the last block.\n\n#### Parameters\n\n`fromBlockNumber` - Integer representing a block number or the string tag `earliest`, as described\nin [Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`toBlockNumber` - Integer representing a block number or one of the string tags `latest` or\n`pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter)\n\nIf you specify:\n\n* No parameters, the call provides metrics for the last 100 blocks, or all blocks if there are less\n  than 100 blocks.\n* Only the first parameter, the call provides metrics for all blocks from the block specified to\n  the latest block.\n\n#### Returns\n\n`result`: _object_ - List of validator objects.\n\n> **Note**\n>\n> The proposer of the genesis block has address `0x0000000000000000000000000000000000000000`."
          },
          "response": [
            {
              "name": "clique_getSignerMetrics",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSignerMetrics\",\n    \"params\": [\n        \"1\",\n        \"100\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"address\": \"0x7ffc57839b00206d1ad20c69a1981b489f772031\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x61\"\n        },\n        {\n            \"address\": \"0x42eb768f2244c8811c63729a21a3569731535f06\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x63\"\n        },\n        {\n            \"address\": \"0xb279182d99e65703f0076e4812653aab85fca0f0\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x62\"\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "clique_getSigners",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSigners\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists [signers for the specified block].\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result: array of data` - List of 20-byte addresses of signers."
          },
          "response": [
            {
              "name": "clique_getSigners",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSigners\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\",\n        \"0x7ffc57839b00206d1ad20c69a1981b489f772031\",\n        \"0xb279182d99e65703f0076e4812653aab85fca0f0\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "clique_getSignersAtHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSignersAtHash\",\n    \"params\": [\n        \"0x98b2ddb5106b03649d2d337d42154702796438b3c74fd25a5782940e84237a48\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists signers for the specified block.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n#### Returns\n\n`result: array of data` - List of 20-byte addresses of signers."
          },
          "response": [
            {
              "name": "clique_getSignersAtHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_getSignersAtHash\",\n    \"params\": [\n        \"0x98b2ddb5106b03649d2d337d42154702796438b3c74fd25a5782940e84237a48\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\",\n        \"0x7ffc57839b00206d1ad20c69a1981b489f772031\",\n        \"0xb279182d99e65703f0076e4812653aab85fca0f0\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "clique_proposals",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_proposals\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns\n[current proposals](https://besu.hyperledger.org/en/stable/HowTo/Configure/Consensus-Protocols/Clique#adding-and-removing-signers).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result`:_object_ - Map of account addresses to corresponding boolean values indicating the\nproposal for each account.\n\nIf the boolean value is `true`, the proposal is to add a signer. If `false`, the proposal is to\nremove a signer."
          },
          "response": [
            {
              "name": "clique_proposals",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_proposals\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"0x42eb768f2244c8811c63729a21a3569731535f07\": false,\n        \"0x12eb759f2222d7711c63729a45c3585731521d01\": true\n    }\n}"
            }
          ]
        },
        {
          "name": "clique_propose",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_propose\",\n    \"params\": [\n        \"0x12eb759f2222d7711c63729a45c3585731521d01\",\n        true\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Propose to [add or remove a signer with the specified address].\n\n#### Parameters\n\n`data` - 20-byte address.\n\n`boolean` -  `true` to propose adding signer or `false` to propose removing signer.\n\n#### Returns\n\n`result: boolean` - `true`"
          },
          "response": [
            {
              "name": "clique_propose",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"clique_propose\",\n    \"params\": [\n        \"0x12eb759f2222d7711c63729a45c3585731521d01\",\n        true\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> Note\n>\n> The `CLIQUE` API methods are not enabled by default for JSON-RPC.\n>\n> To enable the `CLIQUE` API methods use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "DEBUG",
      "item": [
        {
          "name": "debug_accountRange",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_accountRange\",\n    \"params\": [\n        \"12345\",\n        0,\n        \"0\",\n        5\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "[Retesteth](https://github.com/ethereum/retesteth/wiki/Retesteth-Overview) uses\n`debug_accountRange` to implement debugging.\n\nReturns the accounts for a specified block.\n\n#### Parameters\n\n`blockHashOrNumber` : `data` - Block hash or number.\n\n`txIndex` : `integer` - Transaction index from which to start.\n\n`address` : `data` - Address hash from which to start.\n\n`limit` : `integer` - Maximum number of account entries to return.\n\n#### Returns\n\n`result`:`object` - Account details:\n\n* `addressMap`:`object` - List of address hashes and account addresses.\n* `nextKey`:`data` - Hash of the next address if any addresses remain in the state, otherwise\n  zero.\n"
          },
          "response": [
            {
              "name": "debug_accountRange",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_accountRange\",\n    \"params\": [\n        \"12345\",\n        0,\n        \"0\",\n        5\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"addressMap\": {\n            \"0x005e5...86960\": \"0x0000000000000000000000000000000000000000\",\n            \"0x021fe...6ffe3\": \"0x0000000000000000000000000000000000000000\",\n            \"0x028e6...ab776\": \"0x0000000000000000000000000000000000000000\",\n            \"0x02cb5...bc4d8\": \"0x0000000000000000000000000000000000000000\",\n            \"0x03089...23fd5\": \"0x0000000000000000000000000000000000000000\"\n        },\n        \"nextKey\": \"0x04242954a5cb9748d3f66bcd4583fd3830287aa585bebd9dd06fa6625976be49\"\n    }\n}"
            }
          ]
        },
        {
          "name": "debug_metrics",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_metrics\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns metrics providing information on the internal operation of Besu.\n\nThe available metrics might change over time. The JVM metrics might vary based on the JVM\nimplementation used.\n\nThe metric types are:\n\n* Timer\n* Counter\n* Gauge.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result`:`object`"
          },
          "response": [
            {
              "name": "debug_metrics",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_metrics\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"jvm\": {\n            \"memory_bytes_init\": {\n                \"heap\": 268435456,\n                \"nonheap\": 2555904\n            },\n            \"threads_current\": 41,\n            \"memory_bytes_used\": {\n                \"heap\": 696923976,\n                \"nonheap\": 63633456\n            },\n            \"memory_pool_bytes_used\": {\n                \"PS Eden Space\": 669119360,\n                \"Code Cache\": 19689024,\n                \"Compressed Class Space\": 4871144,\n                \"PS Survivor Space\": 2716320,\n                \"PS Old Gen\": 25088296,\n                \"Metaspace\": 39073288\n            },\n            \"other properties...\":\"values...\"\n        },\n        \"process\": {\n            \"open_fds\": 546,\n            \"cpu_seconds_total\": 67.148992,\n            \"start_time_seconds\": 1543897699.589,\n            \"max_fds\": 10240\n        },\n        \"rpc\": {\n            \"request_time\": {\n                \"debug_metrics\": {\n                    \"bucket\": {\n                        \"+Inf\": 2,\n                        \"0.01\": 1,\n                        \"0.075\": 2,\n                        \"0.75\": 2,\n                        \"0.005\": 1,\n                        \"0.025\": 2,\n                        \"0.1\": 2,\n                        \"1.0\": 2,\n                        \"0.05\": 2,\n                        \"10.0\": 2,\n                        \"0.25\": 2,\n                        \"0.5\": 2,\n                        \"5.0\": 2,\n                        \"2.5\": 2,\n                        \"7.5\": 2\n                    },\n                    \"count\": 2,\n                    \"sum\": 0.015925392\n                }\n            }\n        },\n        \"blockchain\": {\n            \"difficulty_total\": 3533501,\n            \"announcedBlock_ingest\": {\n                \"bucket\": {\n                    \"+Inf\": 0,\n                    \"0.01\": 0,\n                    \"0.075\": 0,\n                    \"0.75\": 0,\n                    \"0.005\": 0,\n                    \"0.025\": 0,\n                    \"0.1\": 0,\n                    \"1.0\": 0,\n                    \"0.05\": 0,\n                    \"10.0\": 0,\n                    \"0.25\": 0,\n                    \"0.5\": 0,\n                    \"5.0\": 0,\n                    \"2.5\": 0,\n                    \"7.5\": 0\n                },\n                \"count\": 0,\n                \"sum\": 0\n            },\n            \"height\": 1908793\n        },\n        \"peers\": {\n            \"disconnected_total\": {\n                \"remote\": {\n                    \"SUBPROTOCOL_TRIGGERED\": 5\n                },\n                \"local\": {\n                    \"TCP_SUBSYSTEM_ERROR\": 1,\n                    \"SUBPROTOCOL_TRIGGERED\": 2,\n                    \"USELESS_PEER\": 3\n                }\n            },\n            \"peer_count_current\": 2,\n            \"connected_total\": 10\n        }\n    }\n}"
            }
          ]
        },
        {
          "name": "debug_storageRangeAt",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_storageRangeAt\",\n    \"params\": [\n        \"0x2b76b3a2fc44c0e21ea183d06c846353279a7acf12abcc6fb9d5e8fb14ae2f8c\",\n        0,\n        \"0x0e0d2c8f7794e82164f11798276a188147fbd415\",\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        1\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "[Remix](https://remix.ethereum.org/) uses `debug_storageRangeAt` to implement debugging. Use the\n_Debugger_ tab in Remix instead of calling `debug_storageRangeAt` directly.\n\nReturns the contract storage for the specified range.\n\n#### Parameters\n\n`blockHash` : `data` - Block hash.\n\n`txIndex` : `integer` - Transaction index from which to start.\n\n`address` : `data` - Contract address.\n\n`startKey` : `hash` - Start key.\n\n`limit` : `integer` - Number of storage entries to return.\n\n#### Returns\n\n`result`:`object` - [Range object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#range-object).\n"
          },
          "response": [
            {
              "name": "debug_storageRangeAt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_storageRangeAt\",\n    \"params\": [\n        \"0x2b76b3a2fc44c0e21ea183d06c846353279a7acf12abcc6fb9d5e8fb14ae2f8c\",\n        0,\n        \"0x0e0d2c8f7794e82164f11798276a188147fbd415\",\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        1\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"storage\": {\n            \"0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\": {\n                \"key\": null,\n                \"value\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            }\n        },\n        \"nextKey\": \"0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\"\n    }\n}"
            }
          ]
        },
        {
          "name": "debug_traceBlock",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlock\",\n    \"params\": [\n        \"0xf90277f90208a05a41d0e66b4120775176c09fcf39e7c0520517a13d2b57b18d33d342df038bfca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794e6a7a1d47ff21b6321162aea7c6cb457d5476bcaa00e0df2706b0a4fb8bd08c9246d472abbe850af446405d9eba1db41db18b4a169a04513310fcb9f6f616972a3b948dc5d547f280849a87ebb5af0191f98b87be598a0fe2bf2a941abf41d72637e5b91750332a30283efd40c424dc522b77e6f0ed8c4bc1bbd82b44382520b8252088455c426598b657468706f6f6c2e6f7267a0b48c515a9dde8d346c3337ea520aa995a4738bb595495506125449c1149d6cf488ba4f8ecd18aab215f869f86780862d79883d2000825208945df9b87991262f6ba471f09758cde1c0fc1de734827a69801ca088ff6cf0fefd94db46111149ae4bfc179e9b94721fffd821d38d16464b3f71d0a045e0aff800961cfce805daef7016b9b675c137a6a41a548f7b60a3484c06a33ac0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns full trace of all invoked opcodes of all transactions included in the block.\n\n#### Parameters\n\n`Block` : `data` - RLP of the block.\n\n`Object` - request options (all optional and default to `false`):\n\n* `disableStorage` : `boolean` - `true` disables storage capture.\n* `disableMemory` : `boolean` - `true` disables memory capture.\n* `disableStack` : `boolean` - `true` disables stack capture.\n\n#### Returns\n\n`result`:`object` - [Trace object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#trace-object).\n"
          },
          "response": [
            {
              "name": "debug_traceBlock",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlock\",\n    \"params\": [\n        \"0xf90277f90208a05a41d0e66b4120775176c09fcf39e7c0520517a13d2b57b18d33d342df038bfca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794e6a7a1d47ff21b6321162aea7c6cb457d5476bcaa00e0df2706b0a4fb8bd08c9246d472abbe850af446405d9eba1db41db18b4a169a04513310fcb9f6f616972a3b948dc5d547f280849a87ebb5af0191f98b87be598a0fe2bf2a941abf41d72637e5b91750332a30283efd40c424dc522b77e6f0ed8c4bc1bbd82b44382520b8252088455c426598b657468706f6f6c2e6f7267a0b48c515a9dde8d346c3337ea520aa995a4738bb595495506125449c1149d6cf488ba4f8ecd18aab215f869f86780862d79883d2000825208945df9b87991262f6ba471f09758cde1c0fc1de734827a69801ca088ff6cf0fefd94db46111149ae4bfc179e9b94721fffd821d38d16464b3f71d0a045e0aff800961cfce805daef7016b9b675c137a6a41a548f7b60a3484c06a33ac0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"gas\": 21000,\n        \"failed\": false,\n        \"returnValue\": \"\",\n        \"structLogs\": [\n            {\n                \"pc\": 0,\n                \"op\": \"STOP\",\n                \"gas\": 0,\n                \"gasCost\": 0,\n                \"depth\": 1,\n                \"stack\": [],\n                \"memory\": [],\n                \"storage\": null\n            }\n        ]\n    }\n}"
            }
          ]
        },
        {
          "name": "debug_traceBlockByHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlockByHash\",\n    \"params\": [\n        \"0xaceb3b2c9b25b0589230873921eb894b28722011b8df63977145517d754875a5\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns full trace of all invoked opcodes of all transactions included in the block.\n\n#### Parameters\n\n`block hash` : `data` - Block hash.\n\n`Object` - request options (all optional and default to `false`):\n\n* `disableStorage` : `boolean` - `true` disables storage capture.\n* `disableMemory` : `boolean` - `true` disables memory capture.\n* `disableStack` : `boolean` - `true` disables stack capture.\n\n#### Returns\n\n`result`:`array of objects` - [Trace objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#trace-object)."
          },
          "response": [
            {
              "name": "debug_traceBlockByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlockByHash\",\n    \"params\": [\n        \"0xaceb3b2c9b25b0589230873921eb894b28722011b8df63977145517d754875a5\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"gas\": 21000,\n            \"failed\": false,\n            \"returnValue\": \"\",\n            \"structLogs\": [\n                {\n                    \"pc\": 0,\n                    \"op\": \"STOP\",\n                    \"gas\": 0,\n                    \"gasCost\": 0,\n                    \"depth\": 1,\n                    \"stack\": [],\n                    \"memory\": [],\n                    \"storage\": {},\n                    \"reason\": null\n                }\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "debug_traceBlockByNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlockByNumber\",\n    \"params\": [\n        \"0xaceb3b2c9b25b0589230873921eb894b28722011b8df63977145517d754875a5\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns full trace of all invoked opcodes of all transactions included in the block.\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`Object` - request options (all optional and default to `false`):\n\n* `disableStorage` : `boolean` - `true` disables storage capture.\n* `disableMemory` : `boolean` - `true` disables memory capture.\n* `disableStack` : `boolean` - `true` disables stack capture.\n\n#### Returns\n\n`result`:`array of objects` - [Trace objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#trace-object)."
          },
          "response": [
            {
              "name": "debug_traceBlockByNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlockByNumber\",\n    \"params\": [\n        \"0xaceb3b2c9b25b0589230873921eb894b28722011b8df63977145517d754875a5\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"gas\": 21000,\n            \"failed\": false,\n            \"returnValue\": \"\",\n            \"structLogs\": [\n                {\n                    \"pc\": 0,\n                    \"op\": \"STOP\",\n                    \"gas\": 0,\n                    \"gasCost\": 0,\n                    \"depth\": 1,\n                    \"stack\": [],\n                    \"memory\": [],\n                    \"storage\": null,\n                    \"reason\": null\n                }\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "debug_traceTransaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceTransaction\",\n    \"params\": [\n        \"0x2cc6c94c21685b7e0f8ddabf277a5ccf98db157c62619cde8baea696a74ed18e\",\n        {\n            \"disableStorage\": true\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "[Remix](https://remix.ethereum.org/) uses `debug_traceTransaction` to implement debugging. Use the\n_Debugger_ tab in Remix instead of calling `debug_traceTransaction` directly.\n\nReruns the transaction with the same state as when the transaction executed.\n\n#### Parameters\n\n`transactionHash` : `data` - Transaction hash.\n\n`Object` - request options (all optional and default to `false`):\n\n* `disableStorage` : `boolean` - `true` disables storage capture.\n* `disableMemory` : `boolean` - `true` disables memory capture.\n* `disableStack` : `boolean` - `true` disables stack capture.\n\n#### Returns\n\n`result`:`object` - [Trace object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#trace-object).\n"
          },
          "response": [
            {
              "name": "debug_traceTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceTransaction\",\n    \"params\": [\n        \"0x2cc6c94c21685b7e0f8ddabf277a5ccf98db157c62619cde8baea696a74ed18e\",\n        {\n            \"disableStorage\": true\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"gas\": 21000,\n        \"failed\": false,\n        \"returnValue\": \"\",\n        \"structLogs\": [\n            {\n                \"pc\": 0,\n                \"op\": \"STOP\",\n                \"gas\": 0,\n                \"gasCost\": 0,\n                \"depth\": 1,\n                \"stack\": [],\n                \"memory\": [],\n                \"storage\": null\n            }\n        ]\n    }\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `DEBUG` API methods are not enabled by default for JSON-RPC. To enable the `DEBUG` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options.\n\nThe DEBUG API is a more verbose alternative to the TRACE API whose main purpose is compatibility with tools such as [Remix](https://remix.ethereum.org/). We recommend using the TRACE API for production use over the DEBUG API."
    },
    {
      "name": "EEA",
      "item": [
        {
          "name": "eea_sendRawTransaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eea_sendRawTransaction\",\n    \"params\": [\n        \"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Distributes the\n[private transaction](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Creating-Sending-Private-Transactions),\ngenerates the [privacy marker transaction](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Private-Transaction-Processing)\nand submits it to the transaction pool, and returns the transaction hash of the\n[privacy marker transaction](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Private-Transaction-Processing).\n\nThe signed transaction passed as an input parameter includes the `privateFrom`,\n[`privateFor` or `privacyGroupId`](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Creating-Sending-Private-Transactions#eea-compliant-or-besu-extended-privacy),\nand `restriction` fields.\n\nThe `gas` and `gasPrice` are used by the [privacy marker transaction](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Private-Transaction-Processing)\nnot the private transaction itself.\n\nTo avoid exposing your private key, create signed transactions offline and send the signed\ntransaction data using `eea_sendRawTransaction`.\n\n> **Important**\n>\n> For production systems requiring private transactions, use a network with a consensus mechanism\n> supporting transaction finality to make sure the private state does not become inconsistent\n> with the chain. For example, [IBFT 2.0](https://besu.hyperledger.org/en/stable/HowTo/Configure/Consensus-Protocols/IBFT)\n> provides the required finality.\n>\n> Using private transactions with [pruning](https://besu.hyperledger.org/en/stable/Concepts/Pruning) or\n> [fast sync](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#sync-mode) is not supported.\n> \n> Besu does not implement\n> [`eea_sendTransaction`](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Account-Management).\n> \n> [EthSigner](https://docs.ethsigner.consensys.net/en/latest/) provides transaction signing and\n>implements [`eea_sendTransaction`](https://docs.ethsigner.consensys.net/Reference/API-Methods#eea_sendtransaction).\n\n#### Parameters\n\n`data` -  Signed RLP-encoded private transaction. For example:\n\n`params: [\"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"]`\n\n#### Returns\n\n`result` : `data` - 32-byte transaction hash of the\n[Privacy Marker Transaction](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Private-Transaction-Processing).\n\n> **Tip**\n>\n> If creating a contract, use [priv_getTransactionReceipt](#priv_gettransactionreceipt) to\n> retrieve the contract address after the transaction is finalized."
          },
          "response": [
            {
              "name": "eea_sendRawTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eea_sendRawTransaction\",\n    \"params\": [\n        \"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `EEA` API methods are not enabled by default for JSON-RPC. To enable the `EEA` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "ETH",
      "item": [
        {
          "name": "eth_accounts",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_accounts\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns a list of account addresses a client owns.\n\n> **note**\n> \n> This method returns an empty object because Besu [doesn't support key management](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Account-Management) inside the client.\n> \n> To provide access to your key store and and then sign transactions, use [EthSigner](http://docs.ethsigner.consensys.net/en/latest/) with Besu.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`Array of data` : List of 20-byte account addresses owned by the client.\n"
          },
          "response": [
            {
              "name": "eth_accounts",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_accounts\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": []\n}"
            }
          ]
        },
        {
          "name": "eth_blockNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_blockNumber\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the index corresponding to the block number of the current chain head.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *QUANTITY* - Hexadecimal integer representing the index corresponding to the block\nnumber of the current chain head.\n"
          },
          "response": [
            {
              "name": "eth_blockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_blockNumber\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x2377\"\n}"
            }
          ]
        },
        {
          "name": "eth_call",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_call\",\n    \"params\": [\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Invokes a contract function locally and does not change the state of the blockchain.\n\nYou can interact with contracts using `eth_sendRawTransaction` or `eth_call`.\n\n#### Parameters\n\n*OBJECT* - [Transaction call object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object).\n\n*QUANTITY|TAG* - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` - `data` - Return value of the executed contract.\n"
          },
          "response": [
            {
              "name": "eth_call",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_call\",\n    \"params\": [\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x\"\n}"
            }
          ]
        },
        {
          "name": "eth_chainId",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_chainId\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the [chain ID](https://besu.hyperledger.org/en/stable/Concepts/NetworkID-And-ChainID).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *quantity* - Chain ID, in hexadecimal."
          },
          "response": [
            {
              "name": "eth_chainId",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_chainId\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x7e2\"\n}"
            }
          ]
        },
        {
          "name": "eth_coinbase",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_coinbase\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the client coinbase address. The coinbase address is the account to pay mining rewards to.\n\nTo set a coinbase address, start Besu with the `--miner-coinbase` option set to a valid Ethereum\naccount address. You can get the Ethereum account address from a client such as MetaMask or\nEtherscan. For example:\n\n**Example**\n\n```bash\nbesu --miner-coinbase=\"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\" --rpc-http-enabled\n```\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *data* - Coinbase address."
          },
          "response": [
            {
              "name": "eth_coinbase",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_coinbase\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\"\n}"
            }
          ]
        },
        {
          "name": "eth_estimateGas",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an estimate of the gas required for a transaction to complete. The estimation process\ndoes not use gas and the transaction is not added to the blockchain. The resulting estimate can be\ngreater than the amount of gas the transaction ends up using, for reasons including EVM mechanics\nand node performance.\n\nThe `eth_estimateGas` call does not send a transaction. You must call\n[`eth_sendRawTransaction`](#eth_sendrawtransaction) to execute the transaction.\n\n#### Parameters\n\nThe transaction call object parameters are the same as those for [`eth_call`](#eth_call) except for the\n[`strict` parameter](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object). If `strict` is set to `true`, the sender\naccount balance is checked for value transfer and transaction fees. The default for `strict` is `false`.\n\nFor `eth_estimateGas`, all fields are optional because setting a gas limit\nis irrelevant to the estimation process (unlike transactions, in which gas limits apply).\n\n`object` - [Transaction call object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object).\n\n#### Returns\n\n`result` : `quantity` -  Amount of gas used."
          },
          "response": [
            {
              "name": "eth_estimateGas",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x5208\"\n}"
            }
          ]
        },
        {
          "name": "eth_gasPrice",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_gasPrice\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns a percentile gas unit price for the most recent blocks, in Wei. By default,\nthe last 100 blocks are examined and the 50th percentile gas unit price (that is, the median value)\nis returned.\n\nIf there are no blocks, the value for [`--min-gas-price`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#min-gas-price) is returned.\nThe value returned is restricted to values between [`--min-gas-price`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#min-gas-price)\nand [`--api-gas-price-max`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-max). By default, 1000 Wei and\n500GWei.\n\nUse the [`--api-gas-price-blocks`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-blocks), [`--api-gas-price-percentile`](CLI/CLI-Syntax#api-gas-price-percentile)\n, and [`--api-gas-price-max`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-max) command line\noptions to configure the `eth_gasPrice` default values.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : `quantity` - Percentile gas unit price for the most recent blocks, in Wei, as a hexadecimal value."
          },
          "response": [
            {
              "name": "eth_gasPrice",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_gasPrice\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x3e8\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBalance",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the account balance of the specified address.\n\n#### Parameters\n\n`DATA` - 20-byte account address from which to retrieve the balance.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Current balance, in wei, as a hexadecimal value."
          },
          "response": [
            {
              "name": "eth_getBalance",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x1cfe56f3795885980000\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockByHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByHash\",\n    \"params\": [\n        \"0xaf5526fcb88b2f0d163c9a78ee678bf95b20115dc3d4e2b7b1f5fc4a308724a0\",\n        false\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns information about the block by hash.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a block.\n\n`Boolean` - If `true`, returns the full [transaction objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object);\nif `false`, returns the transaction hashes.\n\n#### Returns\n\n`result` : *OBJECT* - [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object) , or `null` when there is no block."
          },
          "response": [
            {
              "name": "eth_getBlockByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByHash\",\n    \"params\": [\n        \"0xaf5526fcb88b2f0d163c9a78ee678bf95b20115dc3d4e2b7b1f5fc4a308724a0\",\n        false\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": {\n        \"number\": \"0x68b3\",\n        \"hash\": \"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c\",\n        \"mixHash\": \"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d\",\n        \"parentHash\": \"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d\",\n        \"nonce\": \"0x378da40ff335b070\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"logsBloom\": \"0xn        \"transactionsRoot\": \"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126\",\n        \"stateRoot\": \"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233\",\n        \"receiptsRoot\": \"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a\",\n        \"miner\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"difficulty\": \"0x66e619a\",\n        \"totalDifficulty\": \"0x1e875d746ae\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"size\": \"0x334\",\n        \"gasLimit\": \"0x47e7c4\",\n        \"gasUsed\": \"0x37993\",\n        \"timestamp\": \"0x5835c54d\",\n        \"uncles\": [],\n        \"transactions\": [\n            \"0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc\",\n            \"0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d\"\n        ]\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockByNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0xF\",\n        true\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns information about a block by block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`Boolean` - If `true`, returns the full [transaction objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object);\nif `false`, returns only the hashes of the transactions.\n\n#### Returns\n\n`result` : *OBJECT* - [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object) , or `null` when there is no\nblock."
          },
          "response": [
            {
              "name": "eth_getBlockByNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0xF\",\n        true\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"number\": \"0x68b3\",\n        \"hash\": \"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c\",\n        \"mixHash\": \"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d\",\n        \"parentHash\": \"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d\",\n        \"nonce\": \"0x378da40ff335b070\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"logsBloom\": \"0xn        \"transactionsRoot\": \"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126\",\n        \"stateRoot\": \"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233\",\n        \"receiptsRoot\": \"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a\",\n        \"miner\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"difficulty\": \"0x66e619a\",\n        \"totalDifficulty\": \"0x1e875d746ae\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"size\": \"0x334\",\n        \"gasLimit\": \"0x47e7c4\",\n        \"gasUsed\": \"0x37993\",\n        \"timestamp\": \"0x5835c54d\",\n        \"uncles\": [],\n        \"transactions\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockTransactionCountByHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of transactions in the block matching the given block hash.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n#### Returns\n\n`result` : `quantity` - Integer representing the number of transactions in the specified block."
          },
          "response": [
            {
              "name": "eth_getBlockTransactionCountByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockTransactionCountByNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByNumber\",\n    \"params\": [\n        \"0xe8\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of transactions in a block matching the specified block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of transactions in the specified block."
          },
          "response": [
            {
              "name": "eth_getBlockTransactionCountByNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByNumber\",\n    \"params\": [\n        \"0xe8\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x8\"\n}"
            }
          ]
        },
        {
          "name": "eth_getCode",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getCode\",\n    \"params\": [\n        \"0xa50a51c09a5c451c52bb714527e1974b686d8e77\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the code of the smart contract at the specified address. Besu stores compiled smart\ncontract code as a hexadecimal value.\n\n#### Parameters\n\n`DATA` - 20-byte contract address.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *DATA* - Code stored at the specified address."
          },
          "response": [
            {
              "name": "eth_getCode",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getCode\",\n    \"params\": [\n        \"0xa50a51c09a5c451c52bb714527e1974b686d8e77\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x60806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f2458114604d57806355241077146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b60008190556040805182815290517f199cd93e851e4c78c437891155e2112093f8f15394aa89dab09e38d6ca0727879181900360200190a1505600a165627a7a723058209d8929142720a69bde2ab3bfa2da6217674b984899b62753979743c0470a2ea70029\"\n}"
            }
          ]
        },
        {
          "name": "eth_getFilterChanges",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Polls the specified filter and returns an array of changes that have occurred since the last poll.\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`result` : `Array of Object` - If nothing changed since the last poll, an empty list. Otherwise:\n\n* For filters created with `eth_newBlockFilter`, returns block hashes.\n* For filters created with `eth_newPendingTransactionFilter`, returns transaction hashes.\n* For filters created with `eth_newFilter`, returns [log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "name": "filter created with eth_newPendingTransactionFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x1e977049b6db09362da09491bee3949d9362080ce3f4fc19721196d508580d46\",\n        \"0xa3abc4b9a4e497fd58dc59cdff52e9bb5609136bcd499e760798aa92802769be\"\n    ]\n}"
            },
            {
              "name": "Filter created with eth_newFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x233\",\n            \"blockHash\": \"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5\",\n            \"transactionHash\": \"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x42699a7612a82f1d9c36148af9c77354759b210b\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000004\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x238\",\n            \"blockHash\": \"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed\",\n            \"transactionHash\": \"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x42699a7612a82f1d9c36148af9c77354759b210b\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000007\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            },
            {
              "name": "Filter created with eth_newBlockFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0xda2bfe44bf85394f0d6aa702b5af89ae50ae22c0928c18b8903d9269abe17e0b\",\n        \"0x88cd3a37306db1306f01f7a0e5b25a9df52719ad2f87b0f88ee0e6753ed4a812\",\n        \"0x4d4c731fe129ff32b425e6060d433d3fde278b565bbd1fd624d5a804a34f8786\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getFilterLogs",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterLogs\",\n    \"params\": [\n        \"0x5ace5de3985749b6a1b2b0d3f3e1fb69\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) for the specified filter.\n\nLeave the [`--auto-log-bloom-caching-enabled`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\ncommand line option at the default value of `true` to improve log retrieval performance.\n\n> **note**\n\n    `eth_getFilterLogs` is only used for filters created with `eth_newFilter`. To specify a filter\n    object and get logs without creating a filter, use `eth_getLogs` .\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "name": "eth_getFilterLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterLogs\",\n    \"params\": [\n        \"0x5ace5de3985749b6a1b2b0d3f3e1fb69\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb3\",\n            \"blockHash\": \"0xe7cd776bfee2fad031d9cc1c463ef947654a031750b56fed3d5732bee9c61998\",\n            \"transactionHash\": \"0xff36c03c0fba8ac4204e4b975a6632c862a3f08aa01b004f570cc59679ed4689\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb6\",\n            \"blockHash\": \"0x3f4cf35e7ed2667b0ef458cf9e0acd00269a4bc394bb78ee07733d7d7dc87afc\",\n            \"transactionHash\": \"0x117a31d0dbcd3e2b9180c40aca476586a648bc400aa2f6039afdd0feab474399\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getLogs",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getLogs\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) matching a specified filter object.\n\nLeave the [`--auto-log-bloom-caching-enabled`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\ncommand line option at the default value of `true` to improve log retrieval performance.\n\n> **Attention**\n>\n> Using `eth_getLogs` to get the logs from a large range of blocks, especially an entire chain from its genesis block, can cause Besu to hang and never return a response. We recommend splitting one large query into multiple ones for better performance.\n\n#### Parameters\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "name": "eth_getLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getLogs\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb3\",\n            \"blockHash\": \"0xe7cd776bfee2fad031d9cc1c463ef947654a031750b56fed3d5732bee9c61998\",\n            \"transactionHash\": \"0xff36c03c0fba8ac4204e4b975a6632c862a3f08aa01b004f570cc59679ed4689\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb6\",\n            \"blockHash\": \"0x3f4cf35e7ed2667b0ef458cf9e0acd00269a4bc394bb78ee07733d7d7dc87afc\",\n            \"transactionHash\": \"0x117a31d0dbcd3e2b9180c40aca476586a648bc400aa2f6039afdd0feab474399\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getMinerDataByBlockHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns miner data for the specified block.\n\n#### Parameters\n\n`data` - 32 byte block hash.\n\n#### Returns\n\n`result`: `object` - [Miner data](https://besu.hyperledger.org/en/stable/Reference/API-Objects#miner-data-object)."
          },
          "response": [
            {
              "name": "eth_getMinerDataByBlockHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"netBlockReward\": \"0x47c6f3739f3da800\",\n        \"staticBlockReward\": \"0x4563918244f40000\",\n        \"transactionFee\": \"0x38456548220800\",\n        \"uncleInclusionReward\": \"0x22b1c8c1227a000\",\n        \"uncleRewards\": [\n            {\n                \"hash\": \"0x2422d43b4f72e19faf4368949a804494f67559405046b39c6d45b1bd53044974\",\n                \"coinbase\": \"0x0c062b329265c965deef1eede55183b3acb8f611\"\n            }\n        ],\n        \"coinbase\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"difficulty\": \"0x7348c20\",\n        \"totalDifficulty\": \"0xa57bcfdd96\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getMinerDataByBlockNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockNumber\",\n    \"params\": [\n        \"0x7689D2\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns miner data for the specified block.\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result`: `object` - [Miner data](https://besu.hyperledger.org/en/stable/Reference/API-Objects#miner-data-object)."
          },
          "response": [
            {
              "name": "eth_getMinerDataByBlockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"netBlockReward\": \"0x47c6f3739f3da800\",\n        \"staticBlockReward\": \"0x4563918244f40000\",\n        \"transactionFee\": \"0x38456548220800\",\n        \"uncleInclusionReward\": \"0x22b1c8c1227a000\",\n        \"uncleRewards\": [\n            {\n                \"hash\": \"0x2422d43b4f72e19faf4368949a804494f67559405046b39c6d45b1bd53044974\",\n                \"coinbase\": \"0x0c062b329265c965deef1eede55183b3acb8f611\"\n            }\n        ],\n        \"coinbase\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"difficulty\": \"0x7348c20\",\n        \"totalDifficulty\": \"0xa57bcfdd96\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getProof",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getProof\",\n    \"params\": [\n        \"0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        [\n            \"0x0000000000000000000000000000000000000000000000000000000000000347\"\n        ],\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the account and storage values of the specified account, including the Merkle proof.\n\nThe API allows IoT devices or mobile apps which are unable to run light clients to verify responses\nfrom untrusted sources, by using a trusted block hash.\n\n#### Parameters\n\n`DATA` - 20-byte address of the account or contract.\n\n`ARRAY` - Array of 32-byte storage keys to generate proofs for.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result`: *Object* - Account details:\n\n* `balance`:`Quantity` - Account balance.\n* `codeHash`:`Data, 32-byte` - Hash of the account code.\n* `nonce`:`Quantity` - Number of transactions sent from the account.\n* `storageHash`:`Data, 32-byte` - SHA3 of the `storageRoot`.\n* `accountProof`:`Array` - RLP-encoded Merkle tree nodes, starting with the `stateRoot`.\n* `storageProof`:`Array`- Storage entries. Each entry is an object that displays:\n    * `key`:`Quantity` - Storage key.\n    * `value`:`Quantity` - Storage value.\n    * `proof`:`Array` - RLP-encoded Merkle tree nodes, starting with the `storageHash`."
          },
          "response": [
            {
              "name": "eth_getProof",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getProof\",\n    \"params\": [\n        \"0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        [\n            \"0x0000000000000000000000000000000000000000000000000000000000000347\"\n        ],\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"accountProof\": [\n            \"0xf90211a0...608d898380\",\n            \"0xf90211a0...ec33f19580\",\n            \"0xf901d1a0...9e55584480\",\n            \"0xf8718080...18e5777142\"\n        ],\n        \"address\": \"0x0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        \"balance\": \"0x0\",\n        \"codeHash\": \"0x2b6975dcaf69f9bb9a3b30bb6a37b305ce440250bf0dd2f23338cb18e5777142\",\n        \"nonce\": \"0x5f\",\n        \"storageHash\": \"0x917688de43091589aa58c1dfd315105bc9de4478b9ba7471616a4d8a43d46203\",\n        \"storageProof\": [\n            {\n                \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000347\",\n                \"value\": \"0x0\",\n                \"proof\": [\n                    \"0xf90211a0...5176779280\",\n                    \"0xf901f1a0...c208d86580\",\n                    \"0xf8d180a0...1ce6808080\"\n                ]\n            }\n        ]\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getStorageAt",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getStorageAt\",\n    \"params\": [\n        \"0x3B3F3E\",\n        \"0x0\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the value of a storage position at a specified address.\n\n#### Parameters\n\n`DATA` - A 20-byte storage address.\n\n`QUANTITY` - Integer index of the storage position.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *DATA* - The value at the specified storage position."
          },
          "response": [
            {
              "name": "eth_getStorageAt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getStorageAt\",\n    \"params\": [\n        \"0x3B3F3E\",\n        \"0x0\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByBlockHashAndIndex",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"0x1\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns transaction information for the specified block hash and transaction index position.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a block.\n\n`QUANTITY` - Integer representing the transaction index position.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "name": "eth_getTransactionByBlockHashAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"0x1\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\",\n        \"blockNumber\": \"0x1442e\",\n        \"from\": \"0x70c9217d814985faef62b124420f8dfbddd96433\",\n        \"gas\": \"0x3d090\",\n        \"gasPrice\": \"0x57148a6be\",\n        \"hash\": \"0xfc766a71c406950d4a4955a340a092626c35083c64c7be907060368a5e6811d6\",\n        \"input\": \"0x51a34eb8000000000000000000000000000000000000000000000029b9e659e41b780000\",\n        \"nonce\": \"0x2cb2\",\n        \"to\": \"0xcfdc98ec7f01dab1b67b36373524ce0208dc3953\",\n        \"transactionIndex\": \"0x2\",\n        \"value\": \"0x0\",\n        \"v\": \"0x2a\",\n        \"r\": \"0xa2d2b1021e1428740a7c67af3c05fe3160481889b25b921108ac0ac2c3d5d40a\",\n        \"s\": \"0x63186d2aaefe188748bfb4b46fb9493cbc2b53cf36169e8501a5bc0ed941b484\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByBlockNumberAndIndex",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\": [\n        \"latest\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns transaction information for the specified block number and transaction index position.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`QUANTITY` - The transaction index position.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "name": "eth_getTransactionByBlockNumberAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\": [\n        \"latest\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\",\n        \"blockNumber\": \"0x1442e\",\n        \"from\": \"0x70c9217d814985faef62b124420f8dfbddd96433\",\n        \"gas\": \"0x3d090\",\n        \"gasPrice\": \"0x57148a6be\",\n        \"hash\": \"0xfc766a71c406950d4a4955a340a092626c35083c64c7be907060368a5e6811d6\",\n        \"input\": \"0x51a34eb8000000000000000000000000000000000000000000000029b9e659e41b780000\",\n        \"nonce\": \"0x2cb2\",\n        \"to\": \"0xcfdc98ec7f01dab1b67b36373524ce0208dc3953\",\n        \"transactionIndex\": \"0x2\",\n        \"value\": \"0x0\",\n        \"v\": \"0x2a\",\n        \"r\": \"0xa2d2b1021e1428740a7c67af3c05fe3160481889b25b921108ac0ac2c3d5d40a\",\n        \"s\": \"0x63186d2aaefe188748bfb4b46fb9493cbc2b53cf36169e8501a5bc0ed941b484\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByHash\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns transaction information for the specified transaction hash.\n\n#### Parameters\n\n`DATA` - 32-byte transaction hash.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "name": "eth_getTransactionByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByHash\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": {\n        \"blockHash\": \"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda\",\n        \"blockNumber\": \"0x422\",\n        \"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"gas\": \"0x5208\",\n        \"gasPrice\": \"0x3b9aca00\",\n        \"hash\": \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"input\": \"0x\",\n        \"nonce\": \"0x1\",\n        \"to\": \"0x627306090abab3a6e1400e9345bc60c78a8bef57\",\n        \"transactionIndex\": \"0x0\",\n        \"value\": \"0x4e1003b28d9280000\",\n        \"v\": \"0xfe7\",\n        \"r\": \"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3\",\n        \"s\": \"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionCount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"params\": [\n        \"0x9d8f8572f345e1ae53db1dFA4a7fce49B467bD7f\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of transactions sent from a specified address. Use the `pending` tag to get the\nnext account nonce not used by any pending transactions.\n\n#### Parameters\n\n`data` - 20-byte account address.\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *quantity* - Integer representing the number of transactions sent from the specified\naddress."
          },
          "response": [
            {
              "name": "eth_getTransactionCount",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"params\": [\n        \"0x9d8f8572f345e1ae53db1dFA4a7fce49B467bD7f\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionReceipt",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionReceipt\",\n    \"params\": [\n        \"0x96c6830efd87a70020d4d1647c93402d747c05ecf6beeb068dee621f8d13d8d1\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the receipt of a transaction by transaction hash. Receipts for pending transactions are not\navailable.\n\nIf you enabled [revert reason](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Revert-Reason), the receipt includes\navailable revert reasons in the response.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a transaction.\n\n#### Returns\n\n`Object` - [Transaction receipt object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-receipt-object), or `null` when\nthere is no receipt."
          },
          "response": [
            {
              "name": "eth_getTransactionReceipt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionReceipt\",\n    \"params\": [\n        \"0x96c6830efd87a70020d4d1647c93402d747c05ecf6beeb068dee621f8d13d8d1\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xe7212a92cfb9b06addc80dec2a0dfae9ea94fd344efeb157c41e12994fcad60a\",\n        \"blockNumber\": \"0x50\",\n        \"contractAddress\": null,\n        \"cumulativeGasUsed\": \"0x5208\",\n        \"from\": \"0x627306090abab3a6e1400e9345bc60c78a8bef57\",\n        \"gasUsed\": \"0x5208\",\n        \"logs\": [],\n        \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"status\": \"0x1\",\n        \"to\": \"0xf17f52151ebef6c7334fad080c5704d77216b732\",\n        \"transactionHash\": \"0xc00e97af59c6f88de163306935f7682af1a34c67245e414537d02e422815efc3\",\n        \"transactionIndex\": \"0x0\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleByBlockHashAndIndex",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockHashAndIndex\",\n    \"params\": [\n        \"0xc48fb64230a82f65a08e7280bd8745e7fea87bc7c206309dee32209fe9a985f7\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns uncle specified by block hash and index.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n`quantity` - Index of the uncle.\n\n#### Returns\n\n`result` : [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object)\n\n> **note**\n>\n> Uncles do not contain individual transactions."
          },
          "response": [
            {
              "name": "eth_getUncleByBlockHashAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockHashAndIndex\",\n    \"params\": [\n        \"0xc48fb64230a82f65a08e7280bd8745e7fea87bc7c206309dee32209fe9a985f7\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"difficulty\": \"0x76b123df93230\",\n        \"extraData\": \"0x50505945206e616e6f706f6f6c2e6f7267\",\n        \"gasLimit\": \"0x7a121d\",\n        \"gasUsed\": \"0x7a0175\",\n        \"hash\": \"0xc20189c0b1a4a23116ab3b177e929137f6e826f17fc4c2e880e7258c620e9817\",\n        \"logsBloom\": \"0x890086c024487ca422be846a201a10e41bc2882902312116c1119609482031e9c000e2a708004a10281024028020c505727a12570c4810121c59024490b040894406a1c23c37a0094810921da3923600c71c03044b40924280038d07ab91964a008084264a01641380798840805a284cce201a8026045451002500113a00de441001320805ca2840037000111640d090442c11116d2112948084240242340400236ce81502063401dcc214b9105194d050884721c1208800b20501a4201400276004142f118e60808284506979a86e050820101c170c185e2310005205a82a2100382422104182090184800c02489e033440218142140045801c024cc1818485\",\n        \"miner\": \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",\n        \"mixHash\": \"0xf557cc827e058862aa3ea1bd6088fb8766f70c0eac4117c56cf85b7911f82a14\",\n        \"nonce\": \"0xd320b48904347cdd\",\n        \"number\": \"0x768964\",\n        \"parentHash\": \"0x98d752708b3677df8f439c4529f999b94663d5494dbfc08909656db3c90f6255\",\n        \"receiptsRoot\": \"0x0f838f0ceb73368e7fc8d713a7761e5be31e3b4beafe1a6875a7f275f82da45b\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"size\": \"0x21a\",\n        \"stateRoot\": \"0xa0c7d4fca79810c89c517eff8dadb9c6d6f4bcc27c2edfb301301e1cf7dec642\",\n        \"timestamp\": \"0x5cdcbba6\",\n        \"totalDifficulty\": \"0x229ad33cabd4c40d23d\",\n        \"transactionsRoot\": \"0x866e38e91d01ef0387b8e07ccf35cd910224271ccf2b7477b8c8439e8b70f365\",\n        \"uncles\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleByBlockNumberAndIndex",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n    \"params\": [\n        \"0x7689D2\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns uncle specified by block number and index.\n\n#### Parameters\n\n`quantity|tag` - Index of the block, or one of the string tags `latest`, `earliest`, or `pending`,\nas described in [Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`quantity` - Index of the uncle.\n\n#### Returns\n\n`result` : [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object)\n\n> **note**\n>\n> Uncles do not contain individual transactions."
          },
          "response": [
            {
              "name": "eth_getUncleByBlockNumberAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n    \"params\": [\n        \"0x7689D2\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"difficulty\": \"0x77daec467bf93\",\n        \"extraData\": \"0x50505945206e616e6f706f6f6c2e6f7267\",\n        \"gasLimit\": \"0x7a121d\",\n        \"gasUsed\": \"0x7a0f7b\",\n        \"hash\": \"0x42d83ae9c0743f4b1f9c61ff7ea8b164c1bab3627decd49233760680be006ecf\",\n        \"logsBloom\": \"0x888200800000340120220008640200500408006100038400100581c000080240080a0014e8002010080004088040004022402a000c18010001400100002a041141a0610a0052900600041018c0002a0003090020404c00206010010513d00020005380124e08050480710000000108401012b0901c1424006000083a10a8c1040100a0440081050210124400040044304070004001100000012600806008061d0320800000b40042160600002480000000800000c0002100200940801c000820800048024904710000400640490026000a44300309000286088010c2300060003011380006400200812009144042204810209020410a84000410520c08802941\",\n        \"miner\": \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",\n        \"mixHash\": \"0xf977fcdb52868be410b75ef2becc35cc312f13ab0a6ce400ecd9d445f66fa3f2\",\n        \"nonce\": \"0x628b28403bf1e3d3\",\n        \"number\": \"0x7689d0\",\n        \"parentHash\": \"0xb32cfdfbf4adb05d30f02fcc6fe039cc6666402142954051c1a1cb9cc91aa11e\",\n        \"receiptsRoot\": \"0x9c7c8361d1a24ea2841432234c81974a9920d3eba2b2b1c496b5f925a95cb4ac\",\n        \"sha3Uncles\": \"0x7d972aa1b182b7e93f1db043f03fbdbfac6874fe7e67e162141bcc0aefa6336b\",\n        \"size\": \"0x21a\",\n        \"stateRoot\": \"0x74e97b77813146344d75acb5a52a006cc6dfaca678a10fb8a484a8443e919272\",\n        \"timestamp\": \"0x5cdcc0a7\",\n        \"totalDifficulty\": \"0x229b0583b4bd2698ca0\",\n        \"transactionsRoot\": \"0x1d21626afddf05e5866de66ca3fcd98f1caf5357eba0cc6ec675606e116a891b\",\n        \"uncles\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleCountByBlockHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of uncles in a block from a block matching the given block hash.\n\n#### Parameters\n\n`DATA` - 32-byte block hash.\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of uncles in the specified block."
          },
          "response": [
            {
              "name": "eth_getUncleCountByBlockHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x0\"\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleCountByBlockNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockNumber\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of uncles in a block matching the specified block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing either the index of the block within the blockchain, or one\nof the string tags `latest`, `earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of uncles in the specified block."
          },
          "response": [
            {
              "name": "eth_getUncleCountByBlockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockNumber\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getWork",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getWork\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the hash of the current block, the seed hash, and the required target boundary condition.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : Array with the following fields:\n\n* `DATA`, 32 Bytes - Hash of the current block header (pow-hash).\n* `DATA`, 32 Bytes - The seed hash used for the DAG.\n* `DATA`, 32 Bytes - The required target boundary condition: 2^256 / difficulty.\n* `QUANTITY` - Hexadecimal integer representing the current block number."
          },
          "response": [
            {
              "name": "eth_getWork",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getWork\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0xce5e32ca59cb86799a1879e90150b2c3b882852173e59865e9e79abb67a9d636\",\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"0x00a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3\",\n        \"0x42\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_hashrate",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_hashrate\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of hashes per second with which the node is mining.\n\nWhen the stratum server is enabled, this method returns the cumulative hashrate of all sealers\nreporting their hashrate.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : `quantity` - Number of hashes per second.\n"
          },
          "response": [
            {
              "name": "eth_hashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_hashrate\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x12b\"\n}"
            }
          ]
        },
        {
          "name": "eth_mining",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_mining\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Whether the client is actively mining new blocks. Besu pauses mining while the client synchronizes\nwith the network regardless of command settings or methods called.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` (*BOOLEAN*) - `true` if the client is actively mining new blocks, otherwise `false`."
          },
          "response": [
            {
              "name": "eth_mining",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_mining\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_newBlockFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newBlockFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Creates a filter to retrieve new block hashes. To poll for new blocks, use\n[`eth_getFilterChanges`](#eth_getfilterchanges).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "name": "eth_newBlockFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newBlockFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x9d78b6780f844228b96ecc65a320a825\"\n}"
            }
          ]
        },
        {
          "name": "eth_newFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newFilter\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Creates a [log filter](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs). To poll for logs associated with the\ncreated filter, use [`eth_getFilterChanges`](#eth_getfilterchanges). To get all logs associated with\nthe filter, use [`eth_getFilterLogs`](#eth_getfilterlogs).\n\n#### Parameters\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n> **note**\n>\n> `fromBlock` and `toBlock` in the filter options object default to `latest`.\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "name": "eth_newFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newFilter\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1ddf0c00989044e9b41cc0ae40272df3\"\n}"
            }
          ]
        },
        {
          "name": "eth_newPendingTransactionFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newPendingTransactionFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Creates a filter to retrieve new pending transactions hashes. To poll for new pending transactions,\nuse [`eth_getFilterChanges`](#eth_getfilterchanges).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "name": "eth_newPendingTransactionFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newPendingTransactionFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x443d6a77c4964707a8554c92f7e4debd\"\n}"
            }
          ]
        },
        {
          "name": "eth_protocolVersion",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_protocolVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns current Ethereum protocol version.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *quantity* - Ethereum protocol version."
          },
          "response": [
            {
              "name": "eth_protocolVersion",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_protocolVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x3f\"\n}"
            }
          ]
        },
        {
          "name": "eth_sendRawTransaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_sendRawTransaction\",\n    \"params\": [\n        \"0xf86a018203e882520894f17f52151ebef6c7334fad080c5704d77216b732896c6b935b8bbd400000801ba093129415f03b4794fd1512e79ee7f097e4271f66721020f8407aac92179893a5a0451b875d89721ec98be55201092980b0a87bb1c48507fccb86da713596b2a09e\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Sends a [signed transaction](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Transactions).\nA transaction can send ether, deploy a contract, or interact with a contract.\nSet the maximum transaction fee for transactions using the [`--rpc-tx-feecap`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-tx-feecap) CLI option.\n\nYou can interact with contracts using [`eth_sendRawTransaction` or `eth_call`].\n\nTo avoid exposing your private key, create signed transactions offline and send the signed\ntransaction data using `eth_sendRawTransaction`.\n\n> **important**\n>\n> Besu does not implement [`eth_sendTransaction`](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Account-Management).\n>\n> [EthSigner](https://docs.ethsigner.consensys.net/) provides transaction signing and implements\n> [`eth_sendTransaction`](https://docs.ethsigner.consensys.net/Reference/API-Methods#eth_sendtransaction).\n\n#### Parameters\n\n`data` -  Signed transaction serialized to hexadecimal format. For example:\n\n`params: [\"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"]`\n\n> **note**\n>\n> [Creating and Sending Transactions](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Transactions) includes examples of creating signed transactions using the [web3.js](https://github.com/ethereum/web3.js/) library.\n\n#### Returns\n\n`result` : `data` - 32-byte transaction hash."
          },
          "response": [
            {
              "name": "eth_sendRawTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendRawTransaction\",\"params\" :[\"0xf85f808203e8832dc6c08080914f785b6f626a656374204f626a6563745d1ba004193142058b4fe6802677a939e76f93e7fa30e91835a911e206f9855330929ca055ce11a262c804a168c8a801e55a68b3d578a4b52b9dfbed98c4aa47f88a0adf\"], \"id\":1}"
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Length",
                  "value": "118",
                  "name": "Content-Length",
                  "description": "The length of the response body in octets (8-bit bytes)"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "name": "Content-Type",
                  "description": "The mime type of this content"
                }
              ],
              "cookie": [],
              "body": "{\n  \"jsonrpc\" : \"2.0\",\n  \"id\" : 1,\n  \"result\" : \"0xac182cc23bb94696217aa17ca15bd466106af9ba7ea7420aae24ff37338d6e3b\"\n}"
            }
          ]
        },
        {
          "name": "eth_submitHashrate",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Submits the mining hashrate.\n\nUsed by mining software such as [Ethminer](https://github.com/ethereum-mining/ethminer).\n\n#### Parameters\n\n* DATA, 32 Bytes - Hexadecimal string representation of the hash rate.\n* DATA, 32 Bytes - Random hexadecimal ID identifying the client.\n\n#### Returns\n\n`result: Boolean`, `true` if submission is successful, otherwise `false`."
          },
          "response": [
            {
              "name": "eth_submitHashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_submitWork",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitWork\",\n    \"params\": [\n        \"0x0000000000000001\",\n        \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n        \"0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Submits a Proof of Work (Ethash) solution.\n\nUsed by mining software such as [Ethminer](https://github.com/ethereum-mining/ethminer).\n\n#### Parameters\n\n* DATA, 8 Bytes - Retrieved nonce.\n* DATA, 32 Bytes - Hash of the block header (PoW-hash).\n* DATA, 32 Bytes - Mix digest.\n\n#### Returns\n\n`result: Boolean`, `true` if the provided solution is valid, otherwise `false`."
          },
          "response": [
            {
              "name": "eth_submitHashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_syncing",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_syncing\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an object with data about the synchronization status, or `false` if not synchronizing.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *Object|Boolean* - Object with synchronization status data or `false` if not\nsynchronizing:\n\n* `startingBlock` : *quantity* - Index of the highest block on the blockchain when the network\n  synchronization starts.\n* `currentBlock` : *quantity* - Index of the latest block (also known as the best block) for the\n  current node. This is the same index that [`eth_blockNumber`](#eth_blocknumber) returns.\n* `highestBlock`: *quantity* - Index of the highest known block in the peer network (that is, the\n  highest block so far discovered among peer nodes). This is the same value as `currentBlock` if\n  the current node has no peers.\n* `pulledStates`: *quantity* - If fast synchronizing, the number of state entries fetched so far,\n  or `null` if this is not known or not relevant. If full synchronizing or fully synchronized, this\n  field is not returned.\n* `knownStates`: *quantity* - If fast synchronizing, the number of states the node knows of so\n  far, or `null` if this is not known or not relevant. If full synchronizing or fully synchronized,\n  this field is not returned."
          },
          "response": [
            {
              "name": "eth_syncing",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_syncing\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": {\n        \"startingBlock\": \"0x0\",\n        \"currentBlock\": \"0x1518\",\n        \"highestBlock\": \"0x9567a3\",\n        \"pulledStates\": \"0x203ca\",\n        \"knownStates\": \"0x200636\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_uninstallFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_uninstallFilter\",\n    \"params\": [\n        \"0x70355a0b574b437eaa19fe95adfedc0a\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Uninstalls a filter with the specified ID. When a filter is no longer required, call this method.\n\nFilters time out when not requested by [`eth_getFilterChanges`](#eth_getfilterchanges) or [`eth_getFilterLogs`](#eth_getfilterlogs) for 10\nminutes.\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`Boolean` - `true` if the filter was successfully uninstalled, otherwise `false`."
          },
          "response": [
            {
              "name": "eth_uninstallFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_uninstallFilter\",\n    \"params\": [\n        \"0x70355a0b574b437eaa19fe95adfedc0a\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> Methods with an equivalent [GraphQL](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/GraphQL) query include a GraphQL\n    request and result in the method example. The parameter and result descriptions apply to the\n    JSON-RPC requests. The GraphQL specification is defined in the [schema](https://github.com/hyperledger/besu/blob/master/ethereum/api/src/main/resources/schema.graphqls)."
    },
    {
      "name": "IBFT",
      "item": [
        {
          "name": "ibft_discardValidatorVote",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_discardValidatorVote\",\n    \"params\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Discards a proposal to [add or remove a validator] with the specified address.\n\n#### Parameters\n\n`data` - 20-byte address of proposed validator.\n\n#### Returns\n\n`result: boolean` - `true`"
          },
          "response": [
            {
              "name": "ibft_discardValidatorVote",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_discardValidatorVote\",\n    \"params\": [\n        \"0x42eb768f2244c8811c63729a21a3569731535f06\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "ibft_getPendingVotes",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getPendingVotes\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns [votes](https://besu.hyperledger.org/en/stable/HowTo/Configure/Consensus-Protocols/IBFT#adding-and-removing-validators)\ncast in the current [epoch](https://besu.hyperledger.org/en/stable/HowTo/Configure/Consensus-Protocols/IBFT#genesis-file).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result`: `object` - Map of account addresses to corresponding boolean values indicating the vote\nfor each account.\n\nIf the boolean value is `true`, the vote is to add a validator. If `false`, the proposal is to\nremove a validator."
          },
          "response": [
            {
              "name": "ibft_getPendingVotes",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getPendingVotes\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"0xef1bfb6a12794615c9b0b5a21e6741f01e570185\": true,\n        \"0x42d4287eac8078828cf5f3486cfe601a275a49a5\": true\n    }\n}"
            }
          ]
        },
        {
          "name": "ibft_getSignerMetrics",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getSignerMetrics\",\n    \"params\": [\n        \"1\",\n        \"100\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Provides validator metrics for the specified range:\n\n* Number of blocks from each validator.\n* Block number of the last block proposed by each validator (if any proposed in the specified\n  range).\n* All validators present in the last block of the range.\n\n#### Parameters\n\n`fromBlockNumber` - Integer representing a block number or the string tag `earliest` as described\nin [Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`toBlockNumber` - Integer representing a block number or one of the string tags `latest` or\n`pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter)\n\nIf you specify:\n\n* No parameters, the call provides metrics for the last 100 blocks, or all blocks if there are less\n  than 100 blocks.\n* Only the first parameter, the call provides metrics for all blocks from the block specified to\n  the latest block.\n\n#### Returns\n\n`result`: _object_ - List of validator objects\n\n> **Note**\n>\n> The proposer of the genesis block has address `0x0000000000000000000000000000000000000000`."
          },
          "response": [
            {
              "name": "ibft_getSignerMetrics",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getSignerMetrics\",\n    \"params\": [\n        \"1\",\n        \"100\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"address\": \"0x7ffc57839b00206d1ad20c69a1981b489f772031\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x61\"\n        },\n        {\n            \"address\": \"0x42eb768f2244c8811c63729a21a3569731535f06\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x63\"\n        },\n        {\n            \"address\": \"0xb279182d99e65703f0076e4812653aab85fca0f0\",\n            \"proposedBlockCount\": \"0x21\",\n            \"lastProposedBlockNumber\": \"0x62\"\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "ibft_getValidatorsByBlockHash",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getValidatorsByBlockHash\",\n    \"params\": [\n        \"0x98b2ddb5106b03649d2d337d42154702796438b3c74fd25a5782940e84237a48\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists the validators defined in the specified block.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n#### Returns\n\n`result: array of data` - List of validator addresses."
          },
          "response": [
            {
              "name": "ibft_getValidatorsByBlockHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getValidatorsByBlockHash\",\n    \"params\": [\n        \"0x98b2ddb5106b03649d2d337d42154702796438b3c74fd25a5782940e84237a48\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x42d4287eac8078828cf5f3486cfe601a275a49a5\",\n        \"0xb1b2bc9582d2901afdc579f528a35ca41403fa85\",\n        \"0xef1bfb6a12794615c9b0b5a21e6741f01e570185\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "ibft_getValidatorsByBlockNumber",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getValidatorsByBlockNumber\",\n    \"params\": [\n        \"0x09\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists the validators defined in the specified block.\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result: array of data` - List of validator addresses."
          },
          "response": [
            {
              "name": "ibft_getValidatorsByBlockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_getValidatorsByBlockNumber\",\n    \"params\": [\n        \"0x09\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x42d4287eac8078828cf5f3486cfe601a275a49a5\",\n        \"0xb1b2bc9582d2901afdc579f528a35ca41403fa85\",\n        \"0xef1bfb6a12794615c9b0b5a21e6741f01e570185\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "ibft_proposeValidatorVote",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_proposeValidatorVote\",\n    \"params\": [\n        \"42d4287eac8078828cf5f3486cfe601a275a49a5\",\n        true\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Propose to [add or remove a validator] with the specified address.\n\n#### Parameters\n\n`data` - Account address\n\n`boolean` -  `true` to propose adding validator or `false` to propose removing validator.\n\n#### Returns\n\n`result: boolean` - `true`"
          },
          "response": [
            {
              "name": "ibft_proposeValidatorVote",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ibft_proposeValidatorVote\",\n    \"params\": [\n        \"42d4287eac8078828cf5f3486cfe601a275a49a5\",\n        true\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `IBFT` API methods are not enabled by default for JSON-RPC. To enable the `IBFT` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "MINER",
      "item": [
        {
          "name": "miner_start",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"miner_start\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Starts the mining process. To start mining, you must first specify a miner coinbase using the\n[`--miner-coinbase`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#miner-coinbase) command line option.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` :  `boolean` - `true` if mining starts, or if the node was already mining."
          },
          "response": [
            {
              "name": "miner_start",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"miner_start\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "miner_stop",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"miner_stop\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Stops the mining process on the client.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` :  `boolean` - `true` if mining stops, or if the node was not mining.\n"
          },
          "response": [
            {
              "name": "miner_stop",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"miner_stop\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `MINER` API methods are not enabled by default for JSON-RPC. To enable the `MINER` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "Miscellaneous",
      "item": [
        {
          "name": "rpc_modules",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"rpc_modules\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists [enabled APIs](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#api-methods-enabled-by-default)\nand the version of each.\n\n#### Parameters\n\nNone\n\n#### Returns\n\nEnabled APIs."
          },
          "response": [
            {
              "name": "rpc_modules",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"rpc_modules\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"web3\": \"1.0\",\n        \"eth\": \"1.0\",\n        \"net\": \"1.0\"\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "NET",
      "item": [
        {
          "name": "net_version",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_version\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the [network ID](https://besu.hyperledger.org/en/stable/Concepts/NetworkID-And-ChainID).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *string* - Current network ID.\n\n| Network ID | Chain | Network | Description\n|------------|-------|---------|-------------------------------|\n| `1`        | ETH   | Mainnet | Main Ethereum network         |\n| `3`        | ETH   | Ropsten | PoW test network              |\n| `4`        | ETH   | Rinkeby | PoA test network using Clique |\n| `5`        | ETH   | Goerli  | PoA test network using Clique |\n| `2018`     | ETH   | Dev     | PoW development network       |\n| `1`        | ETC   | Classic | Main Ethereum Classic network |\n| `7`        | ETC   | Mordor  | PoW test network              |\n\n> **note**\n>\n> For almost all networks network ID and chain ID are the same.\nThe only networks in the table above with different network and chain IDs are\nClassic with a chain ID of `61` and Mordor with a chain ID of `63`."
          },
          "response": [
            {
              "name": "net_version",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_version\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"3\"\n}"
            }
          ]
        },
        {
          "name": "net_listening",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_listening\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Whether the client is actively listening for network connections.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` (*BOOLEAN*) - `true` if the client is actively listening for network connections;\notherwise `false`."
          },
          "response": [
            {
              "name": "net_listening",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_listening\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "net_peerCount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_peerCount\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the number of peers currently connected to the client.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *integer* - Number of connected peers in hexadecimal."
          },
          "response": [
            {
              "name": "net_peerCount",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_peerCount\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://127.0.0.1:8545",
                  "protocol": "http",
                  "host": ["127", "0", "0", "1"],
                  "port": "8545"
                }
              },
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x5\"\n}"
            }
          ]
        },
        {
          "name": "net_enode",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_enode\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the [enode URL](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *string* - [Enode URL](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url) of the node."
          },
          "response": [
            {
              "name": "net_enode",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_enode\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"enode://6a63160d0ccef5e4986d270937c6c8d60a9a4d3b25471cda960900d037c61988ea14da67f69dbfb3497c465d0de1f001bb95598f74b68a39a5156a608c42fa1b@127.0.0.1:30303\"\n}"
            }
          ]
        },
        {
          "name": "net_services",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_services\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns enabled services (for example, `jsonrpc`) and the host and port for each service.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *objects* - Enabled services."
          },
          "response": [
            {
              "name": "net_services",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_services\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"jsonrpc\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": \"8545\"\n        },\n        \"p2p\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": \"30303\"\n        },\n        \"metrics\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": \"9545\"\n        }\n    }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "PERM (permissioning)",
      "item": [
        {
          "name": "perm_addAccountsToAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_addAccountsToAllowlist\",\n    \"params\": [\n        [\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462032\",\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462034\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Adds accounts (participants) to the\n[accounts permission list](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#account-permissioning).\n\n#### Parameters\n\n`list of strings` - List of account addresses.\n\n> **Note**\n>\n> The parameters list contains a list which is why the account addresses are enclosed by double square brackets.\n\n#### Returns\n\n`result` - `Success` or `error`. Errors include attempting to add accounts already on the\nallowlist or including invalid account addresses.\n"
          },
          "response": [
            {
              "name": "perm_addAccountsToAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_addAccountsToAllowlist\",\n    \"params\": [\n        [\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462032\",\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462034\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "perm_addNodesToAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_addNodesToAllowlist\",\n    \"params\": [\n        [\n            \"enode://7e4ef30e9ec683f26ad76ffca5b5148fa7a6575f4cfad4eb0f52f9c3d8335f4a9b6f9e66fcc73ef95ed7a2a52784d4f372e7750ac8ae0b544309a5b391a23dd7@127.0.0.1:30303\",\n            \"enode://2feb33b3c6c4a8f77d84a5ce44954e83e5f163e7a65f7f7a7fec499ceb0ddd76a46ef635408c513d64c076470eac86b7f2c8ae4fcd112cb28ce82c0d64ec2c94@127.0.0.1:30304\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Adds nodes to the\n[nodes allowlist](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#node-allowlisting).\n\n#### Parameters\n\n`list of strings` - List of [enode URLs](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url).\n\n> **Note**\n>\n> The parameters list contains a list which is why the enode URLs are enclosed by double square brackets.\n\n#### Returns\n\n`result` - `Success` or `error`. Errors include attempting to add nodes already on the allowlist or\nincluding invalid enode URLs."
          },
          "response": [
            {
              "name": "perm_addNodesToAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_addNodesToAllowlist\",\n    \"params\": [\n        [\n            \"enode://7e4ef30e9ec683f26ad76ffca5b5148fa7a6575f4cfad4eb0f52f9c3d8335f4a9b6f9e66fcc73ef95ed7a2a52784d4f372e7750ac8ae0b544309a5b391a23dd7@127.0.0.1:30303\",\n            \"enode://2feb33b3c6c4a8f77d84a5ce44954e83e5f163e7a65f7f7a7fec499ceb0ddd76a46ef635408c513d64c076470eac86b7f2c8ae4fcd112cb28ce82c0d64ec2c94@127.0.0.1:30304\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "perm_getAccountsAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_getAccountsAllowlist\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists accounts (participants) in the\n[accounts permissions list](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#account-permissioning).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result: list` - Accounts (participants) in the accounts allowlist."
          },
          "response": [
            {
              "name": "perm_getAccountsAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_getAccountsAllowlist\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x0000000000000000000000000000000000000009\",\n        \"0xb9b81ee349c3807e46bc71aa2632203c5b462033\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "perm_getNodesAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_getNodesAllowlist\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists nodes in the\n[nodes allowlist](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#node-allowlisting).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result: list` - [Enode URLs](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url) of nodes in the nodes allowlist."
          },
          "response": [
            {
              "name": "perm_getNodesAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_getNodesAllowlist\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"enode://7b61d5ee4b44335873e6912cb5dd3e3877c860ba21417c9b9ef1f7e500a82213737d4b269046d0669fb2299a234ca03443f25fe5f706b693b3669e5c92478ade@127.0.0.1:30305\",\n        \"enode://2feb33b3c6c4a8f77d84a5ce44954e83e5f163e7a65f7f7a7fec499ceb0ddd76a46ef635408c513d64c076470eac86b7f2c8ae4fcd112cb28ce82c0d64ec2c94@127.0.0.1:30304\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "perm_reloadPermissionsFromFile",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_reloadPermissionsFromFile\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Reloads the accounts and nodes allowlists from the [permissions configuration file].\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` - `Success`, or `error` if the permissions configuration file is not valid."
          },
          "response": [
            {
              "name": "perm_reloadPermissionsFromFile",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_reloadPermissionsFromFile\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "perm_removeAccountsFromAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_removeAccountsFromAllowlist\",\n    \"params\": [\n        [\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462032\",\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462034\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Removes accounts (participants) from the\n[accounts permissions list](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#account-permissioning).\n\n#### Parameters\n\n`list of strings` - List of account addresses.\n\n> **Note**\n>\n> The parameters list contains a list which is why the account addresses are enclosed by double square brackets.\n\n#### Returns\n\n`result` - `Success` or `error`. Errors include attempting to remove accounts not on the allowlist\nor including invalid account addresses."
          },
          "response": [
            {
              "name": "perm_removeAccountsFromAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_removeAccountsFromAllowlist\",\n    \"params\": [\n        [\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462032\",\n            \"0xb9b81ee349c3807e46bc71aa2632203c5b462034\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "perm_removeNodesFromAllowlist",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_removeNodesFromAllowlist\",\n    \"params\": [\n        [\n            \"enode://7e4ef30e9ec683f26ad76ffca5b5148fa7a6575f4cfad4eb0f52f9c3d8335f4a9b6f9e66fcc73ef95ed7a2a52784d4f372e7750ac8ae0b544309a5b391a23dd7@127.0.0.1:30303\",\n            \"enode://2feb33b3c6c4a8f77d84a5ce44954e83e5f163e7a65f7f7a7fec499ceb0ddd76a46ef635408c513d64c076470eac86b7f2c8ae4fcd112cb28ce82c0d64ec2c94@127.0.0.1:30304\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Removes nodes from the\n[nodes allowlist](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning#node-allowlisting).\n\n#### Parameters\n\n`list of strings` - List of [enode URLs](https://besu.hyperledger.org/en/stable/Concepts/Node-Keys#enode-url)\n\n> **Note**\n>\n> The parameters list contains a list which is why the enode URLs are enclosed by double square brackets.\n\n#### Returns\n\n`result` - `Success` or `error`. Errors include attempting to remove nodes not on the allowlist\nor including invalid enode URLs."
          },
          "response": [
            {
              "name": "perm_removeNodesFromAllowlist",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"perm_removeNodesFromAllowlist\",\n    \"params\": [\n        [\n            \"enode://7e4ef30e9ec683f26ad76ffca5b5148fa7a6575f4cfad4eb0f52f9c3d8335f4a9b6f9e66fcc73ef95ed7a2a52784d4f372e7750ac8ae0b544309a5b391a23dd7@127.0.0.1:30303\",\n            \"enode://2feb33b3c6c4a8f77d84a5ce44954e83e5f163e7a65f7f7a7fec499ceb0ddd76a46ef635408c513d64c076470eac86b7f2c8ae4fcd112cb28ce82c0d64ec2c94@127.0.0.1:30304\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        }
      ],
      "description": "Use the permissioning API methods for [local](https://besu.hyperledger.org/en/stable/HowTo/Limit-Access/Local-Permissioning)\npermissioning only.\n\n> **Note**\n>\n>The `PERM` API methods are not enabled by default for JSON-RPC. To enable the `PERM` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) CLI options."
    },
    {
      "name": "PLUGINS",
      "item": [
        {
          "name": "plugins_reloadPluginConfig",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"plugins_reloadPluginConfig\",\n    \"params\": [\n        \"tech.pegasys.plus.plugin.kafka.KafkaPlugin\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": null,
            "description": "Reloads specified plugin configuration.\n\n#### Parameters\n\n`string` - Plugin\n\n#### Returns\n\n`string` - `Success`"
          },
          "response": [
            {
              "name": "plugins_reloadPluginConfig",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"plugins_reloadPluginConfig\",\n    \"params\": [\n        \"tech.pegasys.plus.plugin.kafka.KafkaPlugin\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": null
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"Success\"\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `PLUGINS` API methods are not enabled by default for JSON-RPC. To enable the `PLUGINS` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "PRIV",
      "item": [
        {
          "name": "priv_call",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_call\",\n    \"params\": [\n        \"tb8NVyQqZnHNegf/3mYsyB+HEud4SPWn90rz3GoskRw=\",\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"data\": \"0x3fa4f245\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            }
          },
          "response": [
            {
              "name": "priv_call",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_call\",\n    \"params\": [\n        \"tb8NVyQqZnHNegf/3mYsyB+HEud4SPWn90rz3GoskRw=\",\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"data\": \"0x3fa4f245\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n}"
            }
          ]
        },
        {
          "name": "priv_createPrivacyGroup",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_createPrivacyGroup\",\n    \"params\": [\n        {\n            \"addresses\": [\n                \"sTZpbQhcOfd9ZaFDnC00e/N2Ofv9p4/ZTBbEeVtXJ3E=\",\n                \"quhb1pQPGN1w8ZSZSyiIfncEAlVY/M/rauSyQ5wVMRE=\"\n            ],\n            \"name\": \"Group A\",\n            \"description\": \"Description Group A\"\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Creates a group of nodes, specified by their [Tessera](https://docs.tessera.consensys.net/) public key.\n\n#### Parameters\n\n`Object` - Request options:\n\n* `addresses`: `array of data` - Array of nodes, specified by\n  [Tessera](https://docs.tessera.consensys.net/) public keys.\n* `name`: `string` - Privacy group name. Optional.\n* `description`: `string` - Privacy group description. Optional.\n\n#### Returns\n\nPrivacy group ID"
          },
          "response": [
            {
              "name": "priv_createPrivacyGroup",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_createPrivacyGroup\",\n    \"params\": [\n        {\n            \"addresses\": [\n                \"sTZpbQhcOfd9ZaFDnC00e/N2Ofv9p4/ZTBbEeVtXJ3E=\",\n                \"quhb1pQPGN1w8ZSZSyiIfncEAlVY/M/rauSyQ5wVMRE=\"\n            ],\n            \"name\": \"Group A\",\n            \"description\": \"Description Group A\"\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"ewuTVoc5nlvWMwTFdRRK/wvV0dcyQo/Pauvx5bNEbTk=\"\n}"
            }
          ]
        },
        {
          "name": "priv_deletePrivacyGroup",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_deletePrivacyGroup\",\n    \"params\": [\n        \"ewuTVoc5nlvWMwTFdRRK/wvV0dcyQo/Pauvx5bNEbTk=\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Deletes the specified privacy group.\n\n#### Parameters\n\n`data` - Privacy group ID\n\n#### Returns\n\nPrivacy group ID that was deleted."
          },
          "response": [
            {
              "name": "priv_deletePrivacyGroup",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_deletePrivacyGroup\",\n    \"params\": [\n        \"ewuTVoc5nlvWMwTFdRRK/wvV0dcyQo/Pauvx5bNEbTk=\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"ewuTVoc5nlvWMwTFdRRK/wvV0dcyQo/Pauvx5bNEbTk=\"\n}"
            }
          ]
        },
        {
          "name": "priv_distributeRawTransaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_distributeRawTransaction\",\n    \"params\": [\n        \"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Distributes a signed, RLP encoded\n[private transaction](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Creating-Sending-Private-Transactions).\n\n> **tip**\n\n    If you want to sign the Privacy Marker Transaction outside of Besu,\n    use [`priv_distributeRawTransaction`](https://besu.hyperledger.org/en/stable//HowTo/Send-Transactions/Creating-Sending-Private-Transactions#priv_distributerawtransaction)\n    instead of [`eea_sendRawTransaction`](#eea_sendrawtransaction).\n\n#### Parameters\n\n`data` -  Signed RLP-encoded private transaction. For example:\n\n`params: [\"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"]`\n\n#### Returns\n\n`result` : `data` - 32-byte enclave key. The enclave key is a pointer to the private transaction in\n[Tessera](https://docs.tessera.consensys.net/)."
          },
          "response": [
            {
              "name": "priv_distributeRawTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_distributeRawTransaction\",\n    \"params\": [\n        \"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0xfd0d90ab824574abc19c0776ca0210e764561d0ef6d621f2bbbea316eccfe56b\"\n}"
            }
          ]
        },
        {
          "name": "priv_findPrivacyGroup",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_findPrivacyGroup\",\n    \"params\": [\n        [\n            \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\n            \"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns a list of privacy groups containing only the listed members. For example, if the listed\nmembers are A and B, a privacy group containing A, B, and C is not returned.\n\n#### Parameters\n\n`array of data` - Members specified by [Tessera](https://docs.tessera.consensys.net/) public keys.\n\n#### Returns\n\nPrivacy groups containing only the specified members. Privacy groups are\n[EEA-compliant](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups#enterprise-ethereum-alliance-privacy)\nor [Besu-extended](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups#besu-extended-privacy) with types:\n\n* `LEGACY` for EEA-compliant groups.\n* `PANTHEON` for Besu-extended groups."
          },
          "response": [
            {
              "name": "priv_findPrivacyGroup",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_findPrivacyGroup\",\n    \"params\": [\n        [\n            \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\n            \"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"privacyGroupId\": \"GpK3ErNO0xF27T0sevgkJ3+4qk9Z+E3HtXYxcKIBKX8=\",\n            \"name\": \"Group B\",\n            \"description\": \"Description of Group B\",\n            \"type\": \"PANTHEON\",\n            \"members\": [\n                \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\n                \"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "priv_getCode",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getCode\",\n    \"params\": [\n        \"1lJxSIP4JOp6uRn9wYsPeWwqoOP1c4nPQjylB4FExUA=\",\n        \"0xeaf1c1bd00ef0bec5e39fba81740f1c5d05aa201\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the code of the private smart contract at the specified address. Compiled smart contract code\nis stored as a hexadecimal value.\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`data` - 20-byte contract address.\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`, `earliest`,\nor `pending`, as described in [Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : `data` - Code stored at the specified address."
          },
          "response": [
            {
              "name": "priv_getCode",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getCode\",\n    \"params\": [\n        \"1lJxSIP4JOp6uRn9wYsPeWwqoOP1c4nPQjylB4FExUA=\",\n        \"0xeaf1c1bd00ef0bec5e39fba81740f1c5d05aa201\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x60806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f2458114604d57806355241077146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b60008190556040805182815290517f199cd93e851e4c78c437891155e2112093f8f15394aa89dab09e38d6ca0727879181900360200190a1505600a165627a7a723058209d8929142720a69bde2ab3bfa2da6217674b984899b62753979743c0470a2ea70029\"\n}"
            }
          ]
        },
        {
          "name": "priv_getEeaTransactionCount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getEeaTransactionCount\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"GGilEkXLaQ9yhhtbpBT03Me9iYa7U/mWXxrJhnbl1XY=\",\n        [\n            \"KkOjNLmCI6r+mICrC6l+XuEDjFEzQllaMQMpWLl4y1s=\",\n            \"eLb69r4K8/9WviwlfDiZ4jf97P9czyS3DkKu0QYGLjg=\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the private transaction count for the specified account and\n[group of sender and recipients].\n\n> **Important**\n\n> If sending more than one transaction to be mined in the same block (that is, you are not\n> waiting for the transaction receipt), you must calculate the private transaction nonce outside\n> Besu instead of using `priv_getEeaTransactionCount`.\n\n#### Parameters\n\n`data` - Account address.\n\n`data` - Base64 encoded Tessera address of the sender.\n\n`array of data` - Base64 encoded Tessera addresses of recipients.\n\n#### Returns\n\n`quantity` - Integer representing the number of private transactions sent from the address to the\nspecified group of sender and recipients.\n"
          },
          "response": [
            {
              "name": "priv_getEeaTransactionCount",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getEeaTransactionCount\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"GGilEkXLaQ9yhhtbpBT03Me9iYa7U/mWXxrJhnbl1XY=\",\n        [\n            \"KkOjNLmCI6r+mICrC6l+XuEDjFEzQllaMQMpWLl4y1s=\",\n            \"eLb69r4K8/9WviwlfDiZ4jf97P9czyS3DkKu0QYGLjg=\"\n        ]\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "priv_getFilterChanges",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getFilterChanges\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Polls the specified filter for a private contract and returns an array of changes that have occurred\nsince the last poll.\n\nFilters for private contracts can only be created by [`priv_newFilter`](#priv_newfilter) so unlike\n[`eth_getFilterChanges`](#eth_getfilterchanges), `priv_getFilterChanges` always returns an array\nof log objects or an empty list.\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`data` - Filter ID.\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object). If nothing has changed since the last poll, an\nempty list."
          },
          "response": [
            {
              "name": "priv_getFilterChanges",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getFilterChanges\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x4d0\",\n            \"blockHash\": \"0x1c8200667a869e99b945374c37277b5ee7a7ae67943e13c82563381387553dbb\",\n            \"transactionHash\": \"0xb1966b9b372ba68952f48f3a3e78f036f5ae82ceca2de972a782d07fb88f6d88\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x991cc548c154b2953cc48c02f782e1314097dfbb\",\n            \"data\": \"0x\",\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000002\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "priv_getFilterLogs",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getFilterLogs\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) for the specified filter for a private\ncontract.\n\nFor private contracts, `priv_getFilterLogs` is the same as [`eth_getFilterLogs`](#eth_getfilterlogs)\nfor public contracts except there is no [automatic log bloom caching](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\nfor private contracts.\n\n> **Note**\n>\n> `priv_getFilterLogs` is only used for filters created with [`priv_newFilter`](#priv_newfilter).\n> To specify a filter object and get logs without creating a filter, use [`priv_getLogs`](#priv_getlogs).\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`data` - Filter ID.\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "name": "priv_getFilterLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getFilterLogs\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x493\",\n            \"blockHash\": \"0xd9cb3a852e1e02c95f035a2e32d57f82c10cab61faa3e8f5c010adf979bb4786\",\n            \"transactionHash\": \"0x78866dc51fdf189d8cca74f6a8fe54f172348fbd2163bbe80fa8b106cfc7deb4\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x991cc548c154b2953cc48c02f782e1314097dfbb\",\n            \"data\": \"0x\",\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x4d0\",\n            \"blockHash\": \"0x1c8200667a869e99b945374c37277b5ee7a7ae67943e13c82563381387553dbb\",\n            \"transactionHash\": \"0xb1966b9b372ba68952f48f3a3e78f036f5ae82ceca2de972a782d07fb88f6d88\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x991cc548c154b2953cc48c02f782e1314097dfbb\",\n            \"data\": \"0x\",\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000002\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "priv_getLogs",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getLogs\",\n    \"params\": [\n        \"vGy/TZgO6y8VPMVeJAQ99MF1NaTf5ohA3TFfzoEF71k=\",\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"addresses\": [\n                \"0x630c507ff633312087dc33c513b66276abcd2fc3\"\n            ],\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\"\n            ]\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) matching a specified filter object.\n\nFor private contracts, `priv_getLogs` is the same as [`eth_getLogs`](#eth_getlogs) for public contracts\nexcept there is no [automatic log bloom caching](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\nfor private contracts.\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "name": "priv_getLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getLogs\",\n    \"params\": [\n        \"vGy/TZgO6y8VPMVeJAQ99MF1NaTf5ohA3TFfzoEF71k=\",\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"addresses\": [\n                \"0x630c507ff633312087dc33c513b66276abcd2fc3\"\n            ],\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\"\n            ]\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x342\",\n            \"blockHash\": \"0xf5954f068fa2f2f7741281e8c753a8e92047e27ab3c4971836d2c89fab86d92b\",\n            \"transactionHash\": \"0xa9ba5cffde9d4ad8997c5c4352d5d49eeea0e9def8a4ea69991b8837c49d4e4f\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x630c507ff633312087dc33c513b66276abcd2fc3\",\n            \"data\": \"0x\",\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x383\",\n            \"blockHash\": \"0x91b73a47d53e3a88d62ed091a89a4be7557ad91b552e7ff7d86bf78977d5d45d\",\n            \"transactionHash\": \"0xc2a185faf00e87434e55b7f70cc4c38be354c2128b4b96b5f5def0b54a2173ec\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x630c507ff633312087dc33c513b66276abcd2fc3\",\n            \"data\": \"0x\",\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000002\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "priv_getPrivacyPrecompileAddress",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getPrivacyPrecompileAddress\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the address of the\n[privacy precompiled contract](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Private-Transaction-Processing). The address\nis derived and based on the value of the [`privacy-onchain-groups-enabled`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#privacy-onchain-groups-enabled)\noption.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : `data` - Address of the privacy precompile."
          },
          "response": [
            {
              "name": "priv_getPrivacyPrecompileAddress",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getPrivacyPrecompileAddress\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x000000000000000000000000000000000000007e\"\n}"
            }
          ]
        },
        {
          "name": "priv_getPrivateTransaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getPrivateTransaction\",\n    \"params\": [\n        \"0x623c4ce5275a87b91f4f1c521012d39ca19311c787bde405490f4c0426a71498\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the private transaction if you are a participant, otherwise, `null`.\n\n#### Parameters\n\n`data` - Transaction hash returned by [`eea_sendRawTransaction`](#eea_sendrawtransaction) or\n[`eea_sendTransaction`](https://docs.ethsigner.consensys.net/Reference/API-Methods#eea_sendtransaction).\n\n#### Returns\n\nObject - [Private transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#private-transaction-object), or `null` if not\na participant in the private transaction."
          },
          "response": [
            {
              "name": "priv_getPrivateTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getPrivateTransaction\",\n    \"params\": [\n        \"0x623c4ce5275a87b91f4f1c521012d39ca19311c787bde405490f4c0426a71498\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"gas\": \"0x2dc6c0\",\n        \"gasPrice\": \"0x0\",\n        \"hash\": \"0x623c4ce5275a87b91f4f1c521012d39ca19311c787bde405490f4c0426a71498\",\n        \"input\": \"0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610221806100606000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f2451461005c5780636057361d1461008757806367e404ce146100b4575b600080fd5b34801561006857600080fd5b5061007161010b565b6040518082815260200191505060405180910390f35b34801561009357600080fd5b506100b260048036038101908080359060200190929190505050610115565b005b3480156100c057600080fd5b506100c96101cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600254905090565b7fc9db20adedc6cf2b5d25252b101ab03e124902a73fcb12b753f3d1aaa2d8f9f53382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a18060028190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050905600a165627a7a723058208efaf938851fb2d235f8bf9a9685f149129a30fe0f4b20a6c1885dc02f639eba0029\",\n        \"nonce\": \"0x0\",\n        \"to\": null,\n        \"value\": \"0x0\",\n        \"v\": \"0xfe8\",\n        \"r\": \"0x654a6a9663ca70bb13e27cca14b3777cc92da184e19a151cdeef2ccbbd5c6405\",\n        \"s\": \"0x5dd4667b020c8a5af7ae28d4c3126f8dcb1187f49dcf0de9d7a39b1651892eef\",\n        \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\n        \"privateFor\": [\n            \"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"\n        ],\n        \"restriction\": \"restricted\"\n    }\n}"
            }
          ]
        },
        {
          "name": "priv_getTransactionCount",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getTransactionCount\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"kAbelwaVW7okoEn1+okO+AbA4Hhz/7DaCOWVQz9nx5M=\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the private transaction count for specified account and privacy group.\n\n> **important**\n\n> If sending more than one transaction to be mined in the same block (that is, you are not waiting for the transaction receipt), you must calculate the private transaction nonce outside Besu instead of using `priv_getTransactionCount`.\n\n#### Parameters\n\n`data` - Account address.\n\n`data` - Privacy group ID.\n\n#### Returns\n\n`quantity` - Integer representing the number of private transactions sent from the address to the\nspecified privacy group."
          },
          "response": [
            {
              "name": "priv_getTransactionCount",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getTransactionCount\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"kAbelwaVW7okoEn1+okO+AbA4Hhz/7DaCOWVQz9nx5M=\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "priv_getTransactionReceipt",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getTransactionReceipt\",\n    \"params\": [\n        \"0xf3ab9693ad92e277bf785e1772f29fb1864904bbbe87b0470455ddb082caab9d\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns information about the private transaction after mining the transaction. Receipts for\npending transactions are not available.\n\n#### Parameters\n\n`data` - 32-byte hash of a transaction.\n\n#### Returns\n\n`Object` - [Private Transaction receipt object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#private-transaction-receipt-object),\nor `null` if no receipt found."
          },
          "response": [
            {
              "name": "priv_getTransactionReceipt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_getTransactionReceipt\",\n    \"params\": [\n        \"0xf3ab9693ad92e277bf785e1772f29fb1864904bbbe87b0470455ddb082caab9d\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"contractAddress\": \"0x493b76031593402e24e16faa81f677b58e2d53f3\",\n        \"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"output\": \"0x6080604052600436106049576000357c010000000000000000000000000000000000000000000\\n                0000000000000900463ffffffff1680633fa4f24514604e57806355241077146076575b600080fd5b3480156059\\n                57600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b\\n                50609e6004803603810190808035906020019092919050505060a6565b005b60005481565b8060008190555050560\\n                0a165627a7a723058202bdbba2e694dba8fff33d9d0976df580f57bff0a40e25a46c398f8063b4c00360029\",\n        \"commitmentHash\": \"0x79b9e6b0856db398ad7dc208f15b1d38c0c0b0c5f99e4a443a2c5a85510e96a5\",\n        \"transactionHash\": \"0x36219e92b5f53d4150aa9ef7d2d793118cced523de6724100da5b534e3ceb4b8\",\n        \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\n        \"privacyGroupId\": \"cD636RZlcqVSpoxT/ExbkWQfBO7kPAZO0QlWHErNSL8=\",\n        \"status\": \"0x1\",\n        \"logs\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "priv_newFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_newFilter\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"addresses\": [\n                \"0x991cc548c154b2953cc48c02f782e1314097dfbb\"\n            ],\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\"\n            ]\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Creates a [log filter](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) for a private contract. To poll for logs associated with the\ncreated filter, use [`priv_getFilterChanges`](#priv_getfilterchanges). To get all logs associated with\nthe filter, use [`priv_getFilterLogs`](#priv_getfilterlogs).\n\nFor private contracts, `priv_newFilter` is the same as [`eth_newFilter`](#eth_newfilter)\nfor public contracts.\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n> **Note**\n>\n> `fromBlock` and `toBlock` in the filter options object default to `latest`."
          },
          "response": [
            {
              "name": "priv_newFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_newFilter\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"addresses\": [\n                \"0x991cc548c154b2953cc48c02f782e1314097dfbb\"\n            ],\n            \"topics\": [\n                \"0x85bea11d86cefb165374e0f727bacf21dc2f4ea816493981ecf72dcfb212a410\"\n            ]\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x4a35b92809d73f4f53a2355d62125442\"\n}"
            }
          ]
        },
        {
          "name": "priv_uninstallFilter",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_uninstallFilter\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Uninstalls a filter for a private contract with the specified ID. When a filter is no longer required,\ncall this method.\n\nFilters time out when not requested by [`priv_getFilterChanges`](#priv_getfilterchanges) or [`priv_getFilterLogs`](#priv_getfilterlogs) for 10\nminutes.\n\nFor private contracts, `priv_uninstallFilter` is the same as [`eth_uninstallFilter`](#eth_uninstallfilter)\nfor public contracts.\n\n#### Parameters\n\n`data` - 32-byte [privacy Group ID](https://besu.hyperledger.org/en/stable/Concepts/Privacy/Privacy-Groups).\n\n`data` - Filter ID.\n\n#### Returns\n\n`Boolean` - `true` if the filter was successfully uninstalled, otherwise `false`."
          },
          "response": [
            {
              "name": "priv_uninstallFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"priv_uninstallFilter\",\n    \"params\": [\n        \"4rFldHM792LeP/e2WPkTXZedjwKuTr/KwCFTt6mBbkI=\",\n        \"0x4a35b92809d73f4f53a2355d62125442\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `PRIV` API methods are not enabled by default for JSON-RPC. To enable the `PRIV` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "TRACE",
      "item": [
        {
          "name": "trace_replayBlockTransactions",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"trace_replayBlockTransactions\",\n    \"params\": [\n        \"0x12\",\n        [\n            \"trace\",\n            \"vmTrace\",\n            \"stateDiff\"\n        ]\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Provides transaction processing tracing per block.\n\n> **important**\n\n    Your node must be an archive node (that is, synchronized without pruning or fast sync) or the\n    requested block must be within [the number of pruning blocks retained](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#pruning-blocks-retained)\n    (by default, 1024).\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`array of strings` - Tracing options are\n[`trace`, `vmTrace`, and `stateDiff`](Trace-Types). Specify any\ncombination of the three options including none of them.\n\n#### Returns\n\n`result` - Array of [transaction trace objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-trace-object) containing\none object per transaction, in transaction execution order."
          },
          "response": [
            {
              "name": "trace_replayBlockTransactions",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": null
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\":[\n        {\n        \"output\":\"0x\",\n        \"vmTrace\":{\n            \"code\":\"0x7f3940be4289e4c3587d88c1856cc95352461992db0a584c281226faefe560b3016000527f14c4d2c102bdeb2354bfc3dc96a95e4512cf3a8461e0560e2272dbf884ef3905601052600851\",\n            \"ops\":[\n            {\n                \"cost\":3,\n                \"ex\":{\n                \"mem\":null,\n                \"push\":[\n                    \"0x8\"\n                ],\n                \"store\":null,\n                \"used\":16756175\n                },\n                \"pc\":72,\n                \"sub\":null\n            },\n            {\"other properties...\":\"values...\"}\n            ]\n        },\n        \"trace\":[\n            {\n            \"action\":{\n                \"callType\":\"call\",\n                \"from\":\"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n                \"gas\":\"0xffadea\",\n                \"input\":\"0x\",\n                \"to\":\"0x0100000000000000000000000000000000000000\",\n                \"value\":\"0x0\"\n            },\n            \"result\":{\n                \"gasUsed\":\"0x1e\",\n                \"output\":\"0x\"\n            },\n            \"subtraces\":0,\n            \"traceAddress\":[\n            ],\n            \"type\":\"call\"\n            }\n        ],\n        \"stateDiff\":{\n            \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\":{\n            \"balance\":{\n                \"*\":{\n                \"from\":\"0xffffffffffffffffffffffffffffffffc3e12a20b\",\n                \"to\":\"0xffffffffffffffffffffffffffffffffc3dc5f091\"\n                }\n            },\n            \"code\":\"=\",\n            \"nonce\":{\n                \"*\":{\n                \"from\":\"0x14\",\n                \"to\":\"0x15\"\n                }\n            },\n            \"storage\":{\n            }\n            }\n        },\n        \"transactionHash\":\"0x2a5079cc535c429f668f13a7fb9a28bdba6831b5462bd04f781777b332a8fcbd\",\n        },\n        {\"other properties...\":\"values...\"}\n    ]\n}"
            }
          ]
        },
        {
          "name": "trace_block",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"trace_block\",\n    \"params\": [\n        \"0x6\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Provides transaction processing of [type `trace`](Trace-Types#trace) for the specified block.\n\n> **Important**\n>\n> Your node must be an archive node (that is, synchronized without pruning or fast sync) or the\n> requested block must be within [the number of pruning blocks retained](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#pruning-blocks-retained) (by default, 1024).\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` - Array of [calls to other contracts](Trace-Types#trace) containing\none object per call, in transaction execution order."
          },
          "response": [
            {
              "name": "trace_block",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "_postman_previewlanguage": null,
              "header": null,
              "cookie": [],
              "body": null
            }
          ]
        },
        {
          "name": "trace_transaction",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"trace_transaction\",\n    \"params\": [\n        \"0x4c253746668dca6ac3f7b9bc18248b558a95b5fc881d140872c2dff984d344a7\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Provides transaction processing of [type `trace`](Trace-Types#trace) for the specified transaction.\n\n> **Important**\n>\n> Your node must be an archive node (that is, synchronized without pruning or fast sync) or the\n> requested transaction must be contained in a block within [the number of pruning blocks retained](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#pruning-blocks-retained) (by default, 1024).\n\n#### Parameters\n\n`data` : Transaction hash\n\n#### Returns\n\n`result` - Array of [calls to other contracts](Trace-Types#trace) containing\none object per call, in the order called by the transaction.\n"
          },
          "response": [
            {
              "name": "trace_transaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"action\": {\n                \"creationMethod\": \"create\",\n                \"from\": \"0x627306090abab3a6e1400e9345bc60c78a8bef57\",\n                \"gas\": \"0xff2e26\",\n                \"init\": \"0x60006000600060006000732c2b9c9a4a25e24b174f26114e8926a9f2128fe45af2600060006000600060007300a00000000000000000000000000000000000005af2\",\n                \"value\": \"0x0\"\n            },\n            \"blockHash\": \"0x7e9a993adc6f043c0a9b6a385e6ed3fa370586c55823251b8fa7033cf89d414e\",\n            \"blockNumber\": 19,\n            \"result\": {\n                \"address\": \"0x30753e4a8aad7f8597332e813735def5dd395028\",\n                \"code\": \"0x\",\n                \"gasUsed\": \"0x1c39\"\n            },\n            \"subtraces\": 2,\n            \"traceAddress\": [],\n            \"transactionHash\": \"0x4c253746668dca6ac3f7b9bc18248b558a95b5fc881d140872c2dff984d344a7\",\n            \"transactionPosition\": 3,\n            \"type\": \"create\"\n        },\n        {\n            \"action\": {\n                \"callType\": \"callcode\",\n                \"from\": \"0x30753e4a8aad7f8597332e813735def5dd395028\",\n                \"gas\": \"0xfb2ea9\",\n                \"input\": \"0x\",\n                \"to\": \"0x2c2b9c9a4a25e24b174f26114e8926a9f2128fe4\",\n                \"value\": \"0x0\"\n            },\n            \"blockHash\": \"0x7e9a993adc6f043c0a9b6a385e6ed3fa370586c55823251b8fa7033cf89d414e\",\n            \"blockNumber\": 19,\n            \"result\": {\n                \"gasUsed\": \"0x138e\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 1,\n            \"traceAddress\": [\n                0\n            ],\n            \"transactionHash\": \"0x4c253746668dca6ac3f7b9bc18248b558a95b5fc881d140872c2dff984d344a7\",\n            \"transactionPosition\": 3,\n            \"type\": \"call\"\n        },\n        {\n            \"action\": {\n                \"address\": \"0x30753e4a8aad7f8597332e813735def5dd395028\",\n                \"balance\": \"0x0\",\n                \"refundAddress\": \"0x0000000000000000000000000000000000000000\"\n            },\n            \"blockHash\": \"0x7e9a993adc6f043c0a9b6a385e6ed3fa370586c55823251b8fa7033cf89d414e\",\n            \"blockNumber\": 19,\n            \"result\": null,\n            \"subtraces\": 0,\n            \"traceAddress\": [\n                0,\n                0\n            ],\n            \"transactionHash\": \"0x4c253746668dca6ac3f7b9bc18248b558a95b5fc881d140872c2dff984d344a7\",\n            \"transactionPosition\": 3,\n            \"type\": \"suicide\"\n        },\n        {\n            \"action\": {\n                \"callType\": \"callcode\",\n                \"from\": \"0x30753e4a8aad7f8597332e813735def5dd395028\",\n                \"gas\": \"0xfb18a5\",\n                \"input\": \"0x\",\n                \"to\": \"0x00a0000000000000000000000000000000000000\",\n                \"value\": \"0x0\"\n            },\n            \"blockHash\": \"0x7e9a993adc6f043c0a9b6a385e6ed3fa370586c55823251b8fa7033cf89d414e\",\n            \"blockNumber\": 19,\n            \"result\": {\n                \"gasUsed\": \"0x30b\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [\n                1\n            ],\n            \"transactionHash\": \"0x4c253746668dca6ac3f7b9bc18248b558a95b5fc881d140872c2dff984d344a7\",\n            \"transactionPosition\": 3,\n            \"type\": \"call\"\n        }\n    ],\n    \"id\": 1\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `TRACE` API methods are not enabled by default for JSON-RPC. To enable the `TRACE` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options.\n\nThe TRACE API is a more concise alternative to the DEBUG API."
    },
    {
      "name": "TXPOOL",
      "item": [
        {
          "name": "txpool_besuPendingTransactions",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuPendingTransactions\",\n    \"params\": [\n        2,\n        {\n            \"from\": {\n                \"eq\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\"\n            },\n            \"gas\": {\n                \"lt\": \"0x5209\"\n            },\n            \"nonce\": {\n                \"gt\": \"0x1\"\n            }\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists pending transactions that match the supplied filter conditions.\n\n#### Parameters\n\n* `QUANTITY` - Integer representing the maximum number of results to return.\n* Object of fields used to create the filter condition.\n\nEach field in the object corresponds to a field name containing an operator, and a value for the\noperator. A field name can only be specified once, and can only contain one operator.\nFor example, you cannot query transactions with a gas price between 8 and 9 Gwei by using both the\n`gt` and `lt` operator in the same field name instance.\n\nAll filters must be satisfied for a transaction to be returned.\n\n| Field name   | Value                                     | Value type            | Supported operators |\n|--------------|-------------------------------------------|:---------------------:|---------------------|\n| **from**     | Address of the sender.                    | *Data*, 20&nbsp;bytes | `eq`                |\n| **to**       | Address of the receiver, or `\"contract_creation\"`.| *Data*, 20&nbsp;bytes |`eq`, `action`|\n| **gas**      | Gas provided by the sender.               | *Quantity*            | `eq`, `gt`, `lt`    |\n| **gasPrice** | Gas price, in wei, provided by the sender.| *Quantity*            | `eq`, `gt`, `lt`    |\n| **value**    | Value transferred, in wei.                | *Quantity*            | `eq`, `gt`, `lt`    |\n| **nonce**    | Number of transactions made by the sender.| *Quantity*            | `eq`, `gt`, `lt`    |\n|\n\nSupported operators:\n\n* `eq` (Equal to)\n* `lt` (Less than)\n* `gt` (Greater than)\n* `action`\n\n> **Note**\n>\n> The only supported `action` is `\"contract_creation\"`.\n\n#### Returns\n\n`result` - Array of objects with [details of the pending transaction](https://besu.hyperledger.org/en/stable/Reference/API-Objects#pending-transaction-object)."
          },
          "response": [
            {
              "name": "txpool_besuPendingTransactions",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuPendingTransactions\",\n    \"params\": [\n        2,\n        {\n            \"from\": {\n                \"eq\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\"\n            },\n            \"gas\": {\n                \"lt\": \"0x5209\"\n            },\n            \"nonce\": {\n                \"gt\": \"0x1\"\n            }\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n            \"gas\": \"0x5208\",\n            \"gasPrice\": \"0xab5d04c00\",\n            \"hash\": \"0xb7b2f4306c1c228ec94043da73b582594007091a7dfe024b1f8d6d772284e54b\",\n            \"input\": \"0x\",\n            \"nonce\": \"0x2\",\n            \"to\": \"0xf8be4ebda7f62d79a665294ec1263bfdb59aabf2\",\n            \"value\": \"0x0\",\n            \"v\": \"0xfe8\",\n            \"r\": \"0x5beb711e652c6cf0a589d3cea904eefc4f45ce4372652288701d08cc4412086d\",\n            \"s\": \"0x3af14a56e63aa5fb7dcb444a89708363a9d2c1eba1f777c67690288415080ded\"\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "txpool_besuStatistics",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuStatistics\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists statistics about the node transaction pool.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` - Transaction pool statistics:\n\n* `maxSize` - Maximum number of transactions kept in the transaction pool. Use the\n  [`--tx-pool-max-size`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#tx-pool-max-size) option to configure the maximum size.\n* `localCount` - Number of transactions submitted directly to this node.\n* `remoteCount` - Number of transactions received from remote nodes."
          },
          "response": [
            {
              "name": "txpool_besuStatistics",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuStatistics\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"maxSize\": 4096,\n        \"localCount\": 1,\n        \"remoteCount\": 0\n    }\n}"
            }
          ]
        },
        {
          "name": "txpool_besuTransactions",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuTransactions\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Lists transactions in the node transaction pool.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` - List of transactions."
          },
          "response": [
            {
              "name": "txpool_besuTransactions",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_besuTransactions\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"hash\": \"0x8a66830098be4006a3f63a03b6e9b67aa721e04bd6b46d420b8f1937689fb4f1\",\n            \"isReceivedFromLocalSource\": true,\n            \"addedToPoolAt\": \"2019-03-21T01:35:50.911Z\"\n        },\n        {\n            \"hash\": \"0x41ee803c3987ceb5bcea0fad7a76a8106a2a6dd654409007d9931032ea54579b\",\n            \"isReceivedFromLocalSource\": true,\n            \"addedToPoolAt\": \"2019-03-21T01:36:00.374Z\"\n        }\n    ]\n}"
            }
          ]
        }
      ],
      "description": "> **Note**\n>\n> The `TXPOOL` API methods are not enabled by default for JSON-RPC. To enable the `TXPOOL` API methods, use the [`--rpc-http-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-http-api) or [`--rpc-ws-api`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-ws-api) options."
    },
    {
      "name": "WEB3",
      "item": [
        {
          "name": "web3_clientVersion",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_clientVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns the current client version.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *string* - Current client version."
          },
          "response": [
            {
              "name": "web3_clientVersion",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_clientVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"besu/<version>\"\n}"
            }
          ]
        },
        {
          "name": "web3_sha3",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_sha3\",\n    \"params\": [\n        \"0x68656c6c6f20776f726c00\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
              "protocol": "http",
              "host": ["{{rpc-http-host}}"],
              "port": "{{rpc-http-port}}"
            },
            "description": "Returns a [SHA3](https://en.wikipedia.org/wiki/SHA-3) hash of the specified data. The result value\nis a [Keccak-256](https://keccak.team/keccak.html) hash, not the standardized SHA3-256.\n\n#### Parameters\n\n`DATA` - Data to convert to a SHA3 hash.\n\n#### Returns\n\n`result` (*DATA*) - SHA3 result of the input data."
          },
          "response": [
            {
              "name": "web3_sha3",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_sha3\",\n    \"params\": [\n        \"0x68656c6c6f20776f726c00\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://{{rpc-http-host}}:{{rpc-http-port}}",
                  "protocol": "http",
                  "host": ["{{rpc-http-host}}"],
                  "port": "{{rpc-http-port}}"
                }
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x5e39a0a66544c0668bde22d61c47a8710000ece931f13b84d3b2feb44ec96d3f\"\n}"
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
